{"/home/travis/build/npmtest/node-npmtest-jscs/test.js":"/* istanbul instrument in package npmtest_jscs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscs/lib.npmtest_jscs.js":"/* istanbul instrument in package npmtest_jscs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jscs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jscs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jscs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jscs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jscs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jscs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jscs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_jscs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jscs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_jscs.__dirname +\n                    '/lib.npmtest_jscs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/checker.js":"var vowFs = require('vow-fs');\nvar Vow = require('vow');\nvar StringChecker = require('./string-checker');\nvar extractJs = require('./extract-js');\nvar utils = require('util');\n\nvar NodeConfiguration = require('./config/node-configuration');\n\n/**\n * Starts Code Style checking process.\n *\n * @name Checker\n * @see StringChecker constructor\n */\nvar Checker = function() {\n    StringChecker.apply(this, arguments);\n};\n\nutils.inherits(Checker, StringChecker);\n\n/**\n * Loads configuration from JS Object. Activates and configures required rules.\n *\n * @param {Object} config\n */\nChecker.prototype.configure = function(config) {\n    StringChecker.prototype.configure.call(this, config);\n};\n\n/**\n * Execute checker depending on config value either checks or checks and fixes\n *\n * @see Checker#checkPath/Checker#fixPath\n */\nChecker.prototype.execute = function() {\n    var method = this._configuration.getFix() === true ? this.fixPath : this.checkPath;\n\n    return method.apply(this, arguments);\n};\n\n/**\n * Checks single file.\n *\n * @param {String} path\n * @returns {Promise.<Errors>}\n */\nChecker.prototype.checkFile = function(path) {\n    if (this._configuration.isFileExcluded(path)) {\n        return Vow.resolve(null);\n    }\n\n    return vowFs.read(path, 'utf8').then(function(data) {\n        return this.checkString(data, path);\n    }, this);\n};\n\n/**\n * Fixes single file.\n *\n * @param {String} path\n * @returns {Promise.<Errors>}\n */\nChecker.prototype.fixFile = function(path) {\n    if (this._configuration.isFileExcluded(path)) {\n        return Vow.resolve(null);\n    }\n\n    return vowFs.read(path, 'utf8').then(function(data) {\n        var result = this.fixString(data, path);\n        return vowFs.write(path, result.output).then(function() {\n            return result.errors;\n        });\n    }, this);\n};\n\n/**\n * Extract JavaScript from file.\n *\n * @param {String} path\n * @returns {Promise.<Errors>}\n */\nChecker.prototype.extractFile = function(path) {\n    if (this._configuration.isFileExcluded(path)) {\n        return Vow.resolve(null);\n    }\n\n    if (!this._configuration.shouldExtractFile(path)) {\n        return Vow.resolve(null);\n    }\n\n    return vowFs.read(path, 'utf8').then(function(data) {\n        var result = extractJs(path, data);\n\n        result.sources.forEach(function(script) {\n            this.checkString(script.source, path).getErrorList().forEach(function(error) {\n                error.line += script.line;\n                error.column += script.offset;\n                result.addError(error);\n            });\n        }, this);\n\n        return result.errors;\n    }, this);\n};\n\n/**\n * Checks directory recursively.\n *\n * @param {String} path\n * @returns {Promise.<Error[]>}\n */\nChecker.prototype.checkDirectory = function(path) {\n    return this._processDirectory(path, this.checkFile.bind(this));\n};\n\n/**\n * Checks directory or file.\n *\n * @param {String} path\n * @returns {Promise.<Error[]>}\n */\nChecker.prototype.checkPath = function(path) {\n    return this._processPath(path, this.checkFile.bind(this));\n};\n\n/**\n * Fixes directory or file.\n *\n * @param {String} path\n * @returns {Promise.<Error[]>}\n */\nChecker.prototype.fixPath = function(path) {\n    return this._processPath(path, this.fixFile.bind(this));\n};\n\n/**\n * Processes directory recursively.\n *\n * @param {String} path\n * @param {Function} fileHandler\n * @returns {Promise.<Error[]>}\n */\nChecker.prototype._processDirectory = function(path, fileHandler) {\n    return vowFs.listDir(path).then(function(filenames) {\n        return Vow.all(filenames.map(function(filename) {\n            var fullname = path + '/' + filename;\n\n            if (this._configuration.isFileExcluded(fullname)) {\n                return [];\n            }\n\n            return vowFs.stat(fullname).then(function(stat) {\n                if (stat.isDirectory()) {\n                    return this._processDirectory(fullname, fileHandler);\n                }\n\n                if (!this._configuration.hasCorrectExtension(fullname)) {\n                    if (!this._configuration.shouldExtractFile(fullname)) {\n                        return [];\n                    }\n\n                    return this.extractFile(fullname);\n                }\n\n                return fileHandler(fullname);\n            }, this);\n        }, this)).then(function(results) {\n            return [].concat.apply([], results);\n        });\n    }, this);\n};\n\n/**\n * Processes directory or file.\n *\n * @param {String} path\n * @param {Function} fileHandler\n * @returns {Promise.<Error[]>}\n */\nChecker.prototype._processPath = function(path, fileHandler) {\n    path = path.replace(/\\/$/, '');\n\n    return vowFs.exists(path).then(function(exists) {\n        if (!exists) {\n            throw new Error('Path ' + path + ' was not found.');\n        }\n\n        return vowFs.stat(path).then(function(stat) {\n            if (stat.isDirectory()) {\n                return this._processDirectory(path, fileHandler);\n            }\n\n            return fileHandler(path).then(function(errors) {\n                if (errors) {\n                    return [errors];\n                }\n\n                return [];\n            });\n        }, this);\n    }, this);\n};\n\n/**\n * Checks stdin for input\n *\n * @returns {Promise}\n */\nChecker.prototype.checkStdin = function() {\n    return this._processStdin(this.checkString.bind(this));\n};\n\n/**\n * Fixes stdin input\n *\n * @returns {Promise}\n */\nChecker.prototype.fixStdin = function() {\n    return this._processStdin(this.fixString.bind(this));\n};\n\n/**\n *\n * @param {Function} stdinHandler\n * @returns {Promise}\n */\nChecker.prototype._processStdin = function(stdinHandler) {\n    var stdInput = [];\n    var deferred = Vow.defer();\n\n    process.stdin.setEncoding('utf8');\n\n    process.stdin.on('data', function(chunk) {\n        stdInput.push(chunk);\n    });\n\n    process.stdin.on('end', function() {\n        deferred.resolve(stdinHandler(stdInput.join('')));\n    });\n\n    return deferred.promise();\n};\n\n/**\n * Returns new configuration instance.\n *\n * @protected\n * @returns {NodeConfiguration}\n */\nChecker.prototype._createConfiguration = function() {\n    return new NodeConfiguration();\n};\n\nmodule.exports = Checker;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/string-checker.js":"var Errors = require('./errors');\nvar JsFile = require('./js-file');\nvar TokenIndex = require('./token-index');\nvar Configuration = require('./config/configuration');\n\nvar MAX_FIX_ATTEMPTS = 5;\n\nfunction getInternalErrorMessage(rule, e) {\n    return 'Error running rule ' + rule + ': ' +\n        'This is an issue with JSCS and not your codebase.\\n' +\n        'Please file an issue (with the stack trace below) at: ' +\n        'https://github.com/jscs-dev/node-jscs/issues/new\\n' + e.stack;\n}\n\n/**\n * Starts Code Style checking process.\n *\n * @name StringChecker\n */\nvar StringChecker = function() {\n    this._configuredRules = [];\n\n    this._errorsFound = 0;\n    this._maxErrorsExceeded = false;\n\n    this._configuration = this._createConfiguration();\n    this._configuration.registerDefaultPresets();\n};\n\nStringChecker.prototype = {\n    /**\n     * Registers single Code Style checking rule.\n     *\n     * @param {Rule} rule\n     */\n    registerRule: function(rule) {\n        this._configuration.registerRule(rule);\n    },\n\n    /**\n     * Registers built-in Code Style checking rules.\n     */\n    registerDefaultRules: function() {\n        this._configuration.registerDefaultRules();\n    },\n\n    /**\n     * Get processed config.\n     *\n     * @return {Object}\n     */\n    getProcessedConfig: function() {\n        return this._configuration.getProcessedConfig();\n    },\n\n    /**\n     * Loads configuration from JS Object. Activates and configures required rules.\n     *\n     * @param {Object} config\n     */\n    configure: function(config) {\n        this._configuration.load(config);\n\n        this._configuredRules = this._configuration.getConfiguredRules();\n        this._maxErrors = this._configuration.getMaxErrors();\n    },\n\n    /**\n     * Checks file provided with a string.\n     *\n     * @param {String} source\n     * @param {String} [filename='input']\n     * @returns {Errors}\n     */\n    checkString: function(source, filename) {\n        filename = filename || 'input';\n\n        var file = this._createJsFileInstance(filename, source);\n\n        var errors = new Errors(file);\n\n        file.getParseErrors().forEach(function(parseError) {\n            if (!this._maxErrorsExceeded) {\n                this._addParseError(errors, parseError, file);\n            }\n        }, this);\n\n        if (!file._program || file._program.firstChild.type === 'EOF') {\n            return errors;\n        }\n\n        this._checkJsFile(file, errors);\n\n        return errors;\n    },\n\n    /**\n     * Apply fix for common errors.\n     *\n     * @param {Error} error\n     * @return {Boolean} whether the correction was carried out\n     * @private\n     */\n    _fixCommonError: function(error) {\n        if (error.fix) {\n            // \"error.fixed = true\" should go first, so rule can\n            // decide for itself (with \"error.fixed = false\")\n            // if it can fix this particular error\n            error.fixed = true;\n            error.fix();\n        }\n\n        return !!error.fixed;\n    },\n\n    /**\n     * Apply fix for specific error.\n     *\n     * @param {JsFile} file\n     * @param {Error} error\n     * @return {Boolean} whether the correction was carried out\n     * @private\n     */\n    _fixSpecificError: function(file, error) {\n        var configuration = this.getConfiguration();\n        var instance = configuration.getConfiguredRule(error.rule);\n\n        if (instance && instance._fix) {\n            // \"error.fixed = true\" should go first, so rule can\n            // decide for itself (with \"error.fixed = false\")\n            // if it can fix this particular error\n            error.fixed = true;\n            instance._fix(file, error);\n        }\n\n        return !!error.fixed;\n    },\n\n    /**\n     * Apply specific and common fixes.\n     *\n     * @param {JsFile} file\n     * @param {Errors} errors\n     * @protected\n     */\n    _fixJsFile: function(file, errors) {\n        errors.getErrorList().forEach(function(error) {\n            if (error.fixed) {\n                return;\n            }\n\n            try {\n                // Try to apply fixes for common errors\n                var isFixed = this._fixCommonError(error);\n\n                // Apply specific fix\n                if (!isFixed) {\n                    this._fixSpecificError(file, error);\n                }\n            } catch (e) {\n                error.fixed = false;\n                errors.add(\n                    getInternalErrorMessage(error.rule, e),\n                    file.getProgram()\n                );\n            }\n        }, this);\n    },\n\n    /**\n     * Checks a file specified using JsFile instance.\n     * Fills Errors instance with validation errors.\n     *\n     * @param {JsFile} file\n     * @param {Errors} errors\n     * @protected\n     */\n    _checkJsFile: function(file, errors) {\n        if (this._maxErrorsExceeded) {\n            return;\n        }\n\n        var errorFilter = this._configuration.getErrorFilter();\n\n        this._configuredRules.forEach(function(rule) {\n            errors.setCurrentRule(rule.getOptionName());\n\n            try {\n                rule.check(file, errors);\n            } catch (e) {\n                errors.setCurrentRule('internalError');\n                errors.add(getInternalErrorMessage(rule.getOptionName(), e), file.getProgram());\n            }\n        }, this);\n\n        this._configuration.getUnsupportedRuleNames().forEach(function(rulename) {\n            errors.add('Unsupported rule: ' + rulename, file.getProgram());\n        });\n\n        var program = file.getProgram();\n        var tokenIndex = new TokenIndex(program.getFirstToken());\n        errors.calculateErrorLocations(tokenIndex);\n        errors.filter(function(error) {\n            if (error.element) {\n                return tokenIndex.isRuleEnabled(error.rule, error.element);\n            } else {\n                return true;\n            }\n        });\n\n        // sort errors list to show errors as they appear in source\n        errors.getErrorList().sort(function(a, b) {\n            return (a.line - b.line) || (a.column - b.column);\n        });\n\n        if (errorFilter) {\n            errors.filter(errorFilter);\n        }\n\n        if (this.maxErrorsEnabled()) {\n            if (this._maxErrors === -1 || this._maxErrors === null) {\n                this._maxErrorsExceeded = false;\n\n            } else {\n                this._maxErrorsExceeded = this._errorsFound + errors.getErrorCount() > this._maxErrors;\n                errors.stripErrorList(Math.max(0, this._maxErrors - this._errorsFound));\n            }\n        }\n\n        this._errorsFound += errors.getErrorCount();\n    },\n\n    /**\n     * Adds parse error to the error list.\n     *\n     * @param {Errors} errors\n     * @param {Error} parseError\n     * @param {JsFile} file\n     * @private\n     */\n    _addParseError: function(errors, parseError, file) {\n        if (this._maxErrorsExceeded) {\n            return;\n        }\n\n        errors.add(parseError, file.getProgram());\n\n        if (this.maxErrorsEnabled()) {\n            this._errorsFound += 1;\n            this._maxErrorsExceeded = this._errorsFound >= this._maxErrors;\n        }\n    },\n\n    /**\n     * Creates configured JsFile instance.\n     *\n     * @param {String} filename\n     * @param {String} source\n     * @private\n     */\n    _createJsFileInstance: function(filename, source) {\n        return new JsFile({\n            filename: filename,\n            source: source,\n            es3: this._configuration.isES3Enabled()\n        });\n    },\n\n    /**\n     * Checks and fix file provided with a string.\n     *\n     * @param {String} source\n     * @param {String} [filename='input']\n     * @returns {{output: String, errors: Errors}}\n     */\n    fixString: function(source, filename) {\n        filename = filename || 'input';\n\n        var file = this._createJsFileInstance(filename, source);\n        var errors = new Errors(file);\n\n        var parseErrors = file.getParseErrors();\n        if (parseErrors.length > 0) {\n            parseErrors.forEach(function(parseError) {\n                this._addParseError(errors, parseError, file);\n            }, this);\n\n            return {output: source, errors: errors};\n        } else {\n            var attempt = 0;\n            do {\n\n                // Fill in errors list\n                this._checkJsFile(file, errors);\n\n                // Apply fixes\n                this._fixJsFile(file, errors);\n\n                var hasFixes = errors.getErrorList().some(function(err) {\n                    return err.fixed;\n                });\n\n                if (!hasFixes) {\n                    break;\n                }\n\n                file = this._createJsFileInstance(filename, file.render());\n                errors = new Errors(file);\n                attempt++;\n            } while (attempt < MAX_FIX_ATTEMPTS);\n\n            return {output: file.getSource(), errors: errors};\n        }\n    },\n\n    /**\n     * Returns `true` if max erros limit is enabled.\n     *\n     * @returns {Boolean}\n     */\n    maxErrorsEnabled: function() {\n        return this._maxErrors !== null && this._maxErrors !== -1;\n    },\n\n    /**\n     * Returns `true` if error count exceeded `maxErrors` option value.\n     *\n     * @returns {Boolean}\n     */\n    maxErrorsExceeded: function() {\n        return this._maxErrorsExceeded;\n    },\n\n    /**\n     * Returns new configuration instance.\n     *\n     * @protected\n     * @returns {Configuration}\n     */\n    _createConfiguration: function() {\n        return new Configuration();\n    },\n\n    /**\n     * Returns current configuration instance.\n     *\n     * @returns {Configuration}\n     */\n    getConfiguration: function() {\n        return this._configuration;\n    }\n};\n\nmodule.exports = StringChecker;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/errors.js":"var chalk = require('chalk');\nvar TokenAssert = require('./token-assert');\n\nvar LINE_SEPARATOR = /\\r\\n|\\r|\\n/g;\n\nvar EMPTY_POS = {\n    line: 1,\n    column: 0\n};\n\n/**\n * Set of errors for specified file.\n *\n * @name Errors\n * @param {JsFile} file\n */\nvar Errors = function(file) {\n    this._errorList = [];\n    this._file = file;\n    this._currentRule = '';\n\n    /**\n     * @type {TokenAssert}\n     * @public\n     */\n    this.assert = new TokenAssert(file);\n    this.assert.on('error', this._addError.bind(this));\n};\n\nErrors.prototype = {\n    /**\n     * Adds style error to the list\n     *\n     * @param {String | Error} message\n     * @param {cst.types.Element} element\n     * @param {Number} [offset] relative offset\n     */\n    add: function(message, element, offset) {\n        if (message instanceof Error) {\n            this._addParseError(message);\n            return;\n        }\n\n        this._addError({\n            message: message,\n            element: element,\n            offset: offset\n        });\n    },\n\n    /**\n     * Adds style error to the list\n     *\n     * @param {Object} errorInfo\n     */\n    cast: function(errorInfo) {\n        this._addError(errorInfo);\n    },\n\n    /**\n     * Adds parser error to error list.\n     *\n     * @param {Object} errorInfo\n     * @private\n     */\n    _addParseError: function(errorInfo) {\n        this._errorList.push({\n            filename: this._file.getFilename(),\n            rule: 'parseError',\n            message: errorInfo.message,\n            line: errorInfo.loc ? errorInfo.loc.line : 1,\n            column: errorInfo.loc ? errorInfo.loc.column : 0\n        });\n    },\n\n    /**\n     * Adds error to error list.\n     *\n     * @param {Object} errorInfo\n     * @private\n     */\n    _addError: function(errorInfo) {\n        this._errorList.push({\n            filename: this._file.getFilename(),\n            rule: this._currentRule,\n            message: this._prepareMessage(errorInfo),\n            element: errorInfo.element,\n            offset: errorInfo.offset,\n            additional: errorInfo.additional,\n            fixed: false,\n            fix: errorInfo.fix\n        });\n    },\n\n    /**\n     * Prepare error message.\n     *\n     * @param {Object} errorInfo\n     * @private\n     */\n    _prepareMessage: function(errorInfo) {\n        var rule = errorInfo instanceof Error ? 'parseError' : this._currentRule;\n\n        if (rule) {\n            return rule + ': ' + errorInfo.message;\n        }\n\n        return errorInfo.message;\n    },\n\n    /**\n     * Returns style error list.\n     *\n     * @returns {Object[]}\n     */\n    getErrorList: function() {\n        return this._errorList;\n    },\n\n    /**\n     * Returns filename of file this error list is for.\n     *\n     * @returns {String}\n     */\n    getFilename: function() {\n        return this._file.getFilename();\n    },\n\n    /**\n     * Returns true if no errors are added.\n     *\n     * @returns {Boolean}\n     */\n    isEmpty: function() {\n        return this._errorList.length === 0;\n    },\n\n    /**\n     * Returns amount of errors added by the rules.\n     *\n     * @returns {Number}\n     */\n    getValidationErrorCount: function() {\n        return this._errorList.filter(function(error) {\n            return error.rule !== 'parseError' && error.rule !== 'internalError';\n        });\n    },\n\n    /**\n     * Returns amount of errors added by the rules.\n     *\n     * @returns {Number}\n     */\n    getErrorCount: function() {\n        return this._errorList.length;\n    },\n\n    /**\n     * Strips error list to the specified length.\n     *\n     * @param {Number} length\n     */\n    stripErrorList: function(length) {\n        this._errorList.splice(length);\n    },\n\n    /**\n     * Filters out errors based on the supplied filter function\n     *\n     * @param {Function} filter\n     */\n    filter: function(filter) {\n        this._errorList = this._errorList.filter(filter);\n    },\n\n    /**\n     * @param {TokenIndex} tokenIndex\n     */\n    calculateErrorLocations: function(tokenIndex) {\n        this._errorList.forEach(function(error) {\n            var pos = Errors.getPosition(error, tokenIndex);\n            error.line = pos.line;\n            error.column = pos.column;\n        });\n    },\n\n    /**\n     * Formats error for further output.\n     *\n     * @param {Object} error\n     * @param {Boolean} [colorize = false]\n     * @returns {String}\n     */\n    explainError: function(error, colorize) {\n        var lineNumber = error.line - 1;\n        var lines = this._file.getLines();\n        var result = [\n            renderLine(lineNumber, lines[lineNumber], colorize),\n            renderPointer(error.column, colorize)\n        ];\n        var i = lineNumber - 1;\n        var linesAround = 2;\n        while (i >= 0 && i >= (lineNumber - linesAround)) {\n            result.unshift(renderLine(i, lines[i], colorize));\n            i--;\n        }\n        i = lineNumber + 1;\n        while (i < lines.length && i <= (lineNumber + linesAround)) {\n            result.push(renderLine(i, lines[i], colorize));\n            i++;\n        }\n        result.unshift(formatErrorMessage(error.message, this.getFilename(), colorize));\n        return result.join('\\n');\n    },\n\n    /**\n     * Sets the current rule so that errors are aware\n     * of which rule triggered them.\n     *\n     * @param {String} rule\n     */\n    setCurrentRule: function(rule) {\n        this._currentRule = rule;\n    }\n\n};\n\n/**\n * Formats error message header.\n *\n * @param {String} message\n * @param {String} filename\n * @param {Boolean} colorize\n * @returns {String}\n */\nfunction formatErrorMessage(message, filename, colorize) {\n    return (colorize ? chalk.bold(message) : message) +\n        ' at ' +\n        (colorize ? chalk.green(filename) : filename) + ' :';\n}\n\n/**\n * Simple util for prepending spaces to the string until it fits specified size.\n *\n * @param {String} s\n * @param {Number} len\n * @returns {String}\n */\nfunction prependSpaces(s, len) {\n    while (s.length < len) {\n        s = ' ' + s;\n    }\n    return s;\n}\n\n/**\n * Renders single line of code in style error formatted output.\n *\n * @param {Number} n line number\n * @param {String} line\n * @param {Boolean} [colorize = false]\n * @returns {String}\n */\nfunction renderLine(n, line, colorize) {\n    // Convert tabs to spaces, so errors in code lines with tabs as indention symbol\n    // could be correctly rendered, plus it will provide less verbose output\n    line = line.replace(/\\t/g, ' ');\n\n    // \"n + 1\" to print lines in human way (counted from 1)\n    var lineNumber = prependSpaces((n + 1).toString(), 5) + ' |';\n    return ' ' + (colorize ? chalk.grey(lineNumber) : lineNumber) + line;\n}\n\n/**\n * Renders pointer:\n * ---------------^\n *\n * @param {Number} column\n * @param {Boolean} [colorize = false]\n * @returns {String}\n */\nfunction renderPointer(column, colorize) {\n    var res = (new Array(column + 9)).join('-') + '^';\n    return colorize ? chalk.grey(res) : res;\n}\n\n/**\n * Get position of the element\n *\n * @param {Error} [error]\n * @param {TokenIndex} [tokenIndex]\n * @return {Object}\n */\nErrors.getPosition = function(error, tokenIndex) {\n    var element = error.element;\n    var offset = error.offset;\n    var rule = error.rule;\n\n    if (!element) {\n        return EMPTY_POS;\n    }\n\n    if (offset === undefined) {\n        // TODO: probably should be generalized\n        if (rule === 'validateQuoteMarks') {\n            offset = 0;\n        } else if (element.getSourceCodeLength() === 1) {\n            offset = 0;\n        } else {\n            offset = (element.getNewlineCount() === 0 && Math.ceil(element.getSourceCodeLength() / 2)) || 0;\n        }\n    }\n\n    var pos = tokenIndex ? tokenIndex.getElementLoc(element) : element.getLoc().start;\n    if (!pos) {\n        return EMPTY_POS;\n    }\n\n    if (offset === 0) {\n        return pos;\n    }\n\n    var newlineCount = element.getNewlineCount();\n    if (newlineCount > 0) {\n        var code = element.getSourceCode();\n        LINE_SEPARATOR.lastIndex = 0;\n        var lineOffset = 0;\n        var match;\n        var previousOffset = 0;\n        var firstLineColumnOffset = pos.column;\n        while ((match = LINE_SEPARATOR.exec(code)) !== null) {\n            var currentOffset = match.index;\n            if (offset <= currentOffset) {\n                return {\n                    line: pos.line + lineOffset,\n                    column: firstLineColumnOffset + offset - previousOffset\n                };\n            }\n            previousOffset = currentOffset + match[0].length;\n            firstLineColumnOffset = 0;\n            lineOffset++;\n        }\n        return {\n            line: pos.line + newlineCount,\n            column: offset - previousOffset\n        };\n    } else {\n        return {\n            line: pos.line,\n            column: pos.column + offset\n        };\n    }\n};\n\nmodule.exports = Errors;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/token-assert.js":"var utils = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar Token = require('cst').Token;\n\n/**\n * Token assertions class.\n *\n * @name {TokenAssert}\n * @param {JsFile} file\n */\nfunction TokenAssert(file) {\n    EventEmitter.call(this);\n\n    this._file = file;\n}\n\nutils.inherits(TokenAssert, EventEmitter);\n\n/**\n * Requires to have whitespace between specified tokens. Ignores newlines.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {String} [options.message]\n * @param {Number} [options.spaces] Amount of spaces between tokens.\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.whitespaceBetween = function(options) {\n    options.atLeast = 1;\n    return this.spacesBetween(options);\n};\n\n/**\n * Requires to have no whitespace between specified tokens.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {String} [options.message]\n * @param {Boolean} [options.disallowNewLine=false]\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.noWhitespaceBetween = function(options) {\n    options.exactly = 0;\n    return this.spacesBetween(options);\n};\n\n/**\n * Requires to have the whitespace between specified tokens with the provided options.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {String} [options.message]\n * @param {Object} [options.atLeast] At least how many spaces the tokens are apart\n * @param {Object} [options.atMost] At most how many spaces the tokens are apart\n * @param {Object} [options.exactly] Exactly how many spaces the tokens are apart\n * @param {Boolean} [options.disallowNewLine=false]\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.spacesBetween = function(options) {\n    var token = options.token;\n    var nextToken = options.nextToken;\n    var atLeast = options.atLeast;\n    var atMost = options.atMost;\n    var exactly = options.exactly;\n\n    if (!token || !nextToken) {\n        return false;\n    }\n\n    this._validateOptions(options);\n\n    if (!options.disallowNewLine && !this._file.isOnTheSameLine(token, nextToken)) {\n        return false;\n    }\n\n    // Only attempt to remove or add lines if there are no comments between the two nodes\n    // as this prevents accidentally moving a valid token onto a line comment ed line\n    var fixed = !options.token.getNextNonWhitespaceToken().isComment;\n\n    var emitError = function(countPrefix, spaceCount) {\n        var fix = function() {\n            this._file.setWhitespaceBefore(nextToken, new Array(spaceCount + 1).join(' '));\n        }.bind(this);\n\n        var msgPostfix = token.value + ' and ' + nextToken.value;\n\n        if (!options.message) {\n            if (exactly === 0) {\n                // support noWhitespaceBetween\n                options.message = 'Unexpected whitespace between ' + msgPostfix;\n            } else if (exactly !== undefined) {\n                // support whitespaceBetween (spaces option)\n                options.message = spaceCount + ' spaces required between ' + msgPostfix;\n            } else if (atLeast === 1 && atMost === undefined) {\n                // support whitespaceBetween (no spaces option)\n                options.message = 'Missing space between ' + msgPostfix;\n            } else {\n                options.message = countPrefix + ' ' + spaceCount + ' spaces required between ' + msgPostfix;\n            }\n        }\n\n        this.emit('error', {\n            message: options.message,\n            element: token,\n            offset: token.getSourceCodeLength(),\n            fix: fixed ? fix : undefined\n        });\n    }.bind(this);\n\n    var spacesBetween = this._file.getDistanceBetween(token, nextToken);\n\n    if (atLeast !== undefined && spacesBetween < atLeast) {\n        emitError('at least', atLeast);\n        return true;\n    }\n\n    if (atMost !== undefined && spacesBetween > atMost) {\n        emitError('at most', atMost);\n        return true;\n    }\n\n    if (exactly !== undefined && spacesBetween !== exactly) {\n        emitError('exactly', exactly);\n        return true;\n    }\n\n    return false;\n};\n\n/**\n * Requires the specified line to have the expected indentation.\n *\n * @param {Object} options\n * @param {Number} options.actual\n * @param {Number} options.expected\n * @param {String} options.indentChar\n * @param {String} options.token\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.indentation = function(options) {\n    var token = options.token;\n    var lineNumber = options.lineNumber;\n    var actual = options.actual;\n    var expected = options.expected;\n    var indentChar = options.indentChar;\n\n    if (actual === expected) {\n        return false;\n    }\n\n    this.emit('error', {\n        message: 'Expected indentation of ' + expected + ' characters',\n        line: lineNumber,\n        column: expected,\n        fix: function() {\n            var newWhitespace = (new Array(expected + 1)).join(indentChar);\n\n            this._updateWhitespaceByLine(token, function(lines) {\n                lines[lines.length - 1] = newWhitespace;\n                return lines;\n            });\n\n            if (token.isComment) {\n                this._updateCommentWhitespace(token, indentChar, actual, expected);\n            }\n        }.bind(this)\n    });\n\n    return true;\n};\n\n/**\n * Updates the whitespace of a line by passing split lines to a callback function\n * for editing.\n *\n * @param {Object} token\n * @param {Function} callback\n */\nTokenAssert.prototype._updateWhitespaceByLine = function(token, callback) {\n    var lineBreak = this._file.getLineBreakStyle();\n    var lines = this._file.getWhitespaceBefore(token).split(/\\r\\n|\\r|\\n/);\n\n    lines = callback(lines);\n    this._file.setWhitespaceBefore(token, lines.join(lineBreak));\n};\n\n/**\n * Updates the whitespace of a line by passing split lines to a callback function\n * for editing.\n *\n * @param {Object} token\n * @param {Function} indentChar\n * @param {Number} actual\n * @param {Number} expected\n */\nTokenAssert.prototype._updateCommentWhitespace = function(token, indentChar, actual, expected) {\n    var difference = expected - actual;\n    var tokenLines = token.value.split(/\\r\\n|\\r|\\n/);\n    var i = 1;\n    if (difference >= 0) {\n        var lineWhitespace = (new Array(difference + 1)).join(indentChar);\n        for (; i < tokenLines.length; i++) {\n            tokenLines[i] = tokenLines[i] === '' ? '' : lineWhitespace + tokenLines[i];\n        }\n    } else {\n        for (; i < tokenLines.length; i++) {\n            tokenLines[i] = tokenLines[i].substring(-difference);\n        }\n    }\n\n    var newComment = new Token('CommentBlock', tokenLines.join(this._file.getLineBreakStyle()));\n    token.parentElement.replaceChild(newComment, token);\n};\n\n/**\n * Requires tokens to be on the same line.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {Boolean} [options.stickToPreviousToken]\n * @param {String} [options.message]\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.sameLine = function(options) {\n    options.exactly = 0;\n\n    return this.linesBetween(options);\n};\n\n/**\n * Requires tokens to be on different lines.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {Object} [options.message]\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.differentLine = function(options) {\n    options.atLeast = 1;\n\n    return this.linesBetween(options);\n};\n\n/**\n * Requires tokens to have a certain amount of lines between them.\n * Set at least one of atLeast or atMost OR set exactly.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {Object} [options.message]\n * @param {Object} [options.atLeast] At least how many lines the tokens are apart\n * @param {Object} [options.atMost] At most how many lines the tokens are apart\n * @param {Object} [options.exactly] Exactly how many lines the tokens are apart\n * @param {Boolean} [options.stickToPreviousToken] When auto-fixing stick the\n *     nextToken onto the previous token.\n * @return {Boolean} whether an error was found\n */\nTokenAssert.prototype.linesBetween = function(options) {\n    var token = options.token;\n    var nextToken = options.nextToken;\n    var atLeast = options.atLeast;\n    var atMost = options.atMost;\n    var exactly = options.exactly;\n\n    if (!token || !nextToken) {\n        return false;\n    }\n\n    this._validateOptions(options);\n\n    // Only attempt to remove or add lines if there are no comments between the two nodes\n    // as this prevents accidentally moving a valid token onto a line comment ed line\n    var fixed = !options.token.getNextNonWhitespaceToken().isComment;\n\n    var linesBetween = this._file.getLineCountBetween(token, nextToken);\n\n    var emitError = function(countPrefix, lineCount) {\n        var msgPrefix = token.value + ' and ' + nextToken.value;\n\n        var fix = function() {\n            this._augmentLineCount(options, lineCount);\n        }.bind(this);\n\n        if (!options.message) {\n            if (exactly === 0) {\n                // support sameLine\n                options.message = msgPrefix + ' should be on the same line';\n            } else if (atLeast === 1 && atMost === undefined) {\n                // support differentLine\n                options.message = msgPrefix + ' should be on different lines';\n            } else {\n                // support linesBetween\n                options.message = msgPrefix + ' should have ' + countPrefix + ' ' + lineCount + ' line(s) between them';\n            }\n        }\n\n        this.emit('error', {\n            message: options.message,\n            element: token,\n            offset: token.getSourceCodeLength(),\n            fix: fixed ? fix : undefined\n        });\n    }.bind(this);\n\n    if (atLeast !== undefined && linesBetween < atLeast) {\n        emitError('at least', atLeast);\n        return true;\n    }\n\n    if (atMost !== undefined && linesBetween > atMost) {\n        emitError('at most', atMost);\n        return true;\n    }\n\n    if (exactly !== undefined && linesBetween !== exactly) {\n        emitError('exactly', exactly);\n        return true;\n    }\n\n    return false;\n};\n\n/**\n * Throws errors if atLeast, atMost, and exactly options don't mix together properly or\n * if the tokens provided are equivalent.\n *\n * @param {Object} options\n * @param {Object} options.token\n * @param {Object} options.nextToken\n * @param {Object} [options.atLeast] At least how many spaces the tokens are apart\n * @param {Object} [options.atMost] At most how many spaces the tokens are apart\n * @param {Object} [options.exactly] Exactly how many spaces the tokens are apart\n * @throws {Error} If the options are non-sensical\n * @private\n */\nTokenAssert.prototype._validateOptions = function(options) {\n    var token = options.token;\n    var nextToken = options.nextToken;\n    var atLeast = options.atLeast;\n    var atMost = options.atMost;\n    var exactly = options.exactly;\n\n    if (token === nextToken) {\n        throw new Error('You cannot specify the same token as both token and nextToken');\n    }\n\n    if (atLeast === undefined &&\n        atMost === undefined &&\n        exactly === undefined) {\n        throw new Error('You must specify at least one option');\n    }\n\n    if (exactly !== undefined && (atLeast !== undefined || atMost !== undefined)) {\n        throw new Error('You cannot specify atLeast or atMost with exactly');\n    }\n\n    if (atLeast !== undefined && atMost !== undefined && atMost < atLeast) {\n        throw new Error('atLeast and atMost are in conflict');\n    }\n};\n\n/**\n * Augments token whitespace to contain the correct number of newlines while preserving indentation\n *\n * @param {Object} options\n * @param {Object} options.nextToken\n * @param {Boolean} [options.stickToPreviousToken]\n * @param {Number} lineCount\n * @private\n */\nTokenAssert.prototype._augmentLineCount = function(options, lineCount) {\n    var token = options.nextToken;\n    if (lineCount === 0) {\n        if (options.stickToPreviousToken) {\n            var nextToken = this._file.getNextToken(token, {\n                includeComments: true\n            });\n            this._file.setWhitespaceBefore(nextToken, this._file.getWhitespaceBefore(token));\n        }\n\n        this._file.setWhitespaceBefore(token, ' ');\n        return;\n    }\n\n    this._updateWhitespaceByLine(token, function(lines) {\n        var currentLineCount = lines.length;\n        var lastLine = lines[lines.length - 1];\n\n        if (currentLineCount <= lineCount) {\n            // add additional lines that maintain the same indentation as the former last line\n            for (; currentLineCount <= lineCount; currentLineCount++) {\n                lines[lines.length - 1] = '';\n                lines.push(lastLine);\n            }\n        } else {\n            // remove lines and then ensure that the new last line maintains the previous indentation\n            lines = lines.slice(0, lineCount + 1);\n            lines[lines.length - 1] = lastLine;\n        }\n\n        return lines;\n    });\n};\n\nmodule.exports = TokenAssert;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/js-file.js":"// var assert = require('assert');\nvar cst = require('cst');\nvar Parser = cst.Parser;\nvar Token = cst.Token;\nvar Program = cst.types.Program;\nvar Fragment = cst.Fragment;\nvar ScopesApi = cst.api.ScopesApi;\n\nvar treeIterator = require('./tree-iterator');\n\n// var Program = cst.types.Program;\n\n/**\n * Operator list which are represented as keywords in token list.\n */\nvar KEYWORD_OPERATORS = {\n    'instanceof': true,\n    'in': true\n};\n\n/**\n * File representation for JSCS.\n *\n * @name JsFile\n * @param {Object} params\n * @param {String} params.filename\n * @param {String} params.source\n * @param {Boolean} [params.es3]\n */\nvar JsFile = function(params) {\n    params = params || {};\n    this._parseErrors = [];\n    this._filename = params.filename;\n    this._source = params.source;\n\n    this._es3 = params.es3 || false;\n\n    this._lineBreaks = null;\n    this._lines = this._source.split(/\\r\\n|\\r|\\n/);\n\n    var parser = new Parser({\n        strictMode: false,\n        languageExtensions: {\n            gritDirectives: true,\n            appleInstrumentationDirectives: true\n        }\n    });\n\n    try {\n        this._program = parser.parse(this._source);\n    } catch (e) {\n        this._parseErrors.push(e);\n        this._program = new Program([\n            new Token('EOF', '')\n        ]);\n    }\n\n    // Lazy initialization\n    this._scopes = null;\n};\n\nJsFile.prototype = {\n    /**\n     * @returns {cst.types.Program}\n     */\n    getProgram: function() {\n        return this._program;\n    },\n\n    /**\n     * Returns the first line break character encountered in the file.\n     * Assumes LF if the file is only one line.\n     *\n     * @returns {String}\n     */\n    getLineBreakStyle: function() {\n        var lineBreaks = this.getLineBreaks();\n        return lineBreaks.length ? lineBreaks[0] : '\\n';\n    },\n\n    /**\n     * Returns all line break characters from the file.\n     *\n     * @returns {String[]}\n     */\n    getLineBreaks: function() {\n        if (this._lineBreaks === null) {\n            this._lineBreaks = this._source.match(/\\r\\n|\\r|\\n/g) || [];\n        }\n        return this._lineBreaks;\n    },\n\n    /**\n     * Sets whitespace before specified token.\n     *\n     * @param {Object} token - in front of which we will add/remove/replace the whitespace token\n     * @param {String} whitespace - value of the whitespace token - `\\n`, `\\s`, `\\t`\n     */\n    setWhitespaceBefore: function(token, whitespace) {\n        var prevToken = token.getPreviousToken();\n        var ws = new Token('Whitespace', whitespace);\n        var fragment = new Fragment(ws);\n\n        if (prevToken && prevToken.isWhitespace) {\n            if (whitespace === '') {\n                prevToken.remove();\n                return;\n            }\n\n            prevToken.parentElement.replaceChild(fragment, prevToken);\n            return;\n        }\n\n        this._setTokenBefore(token, fragment);\n    },\n\n    _setTokenBefore: function(token, fragment) {\n        var parent = token;\n        var grandpa = parent.parentElement;\n\n        while (grandpa) {\n            try {\n                grandpa.insertChildBefore(fragment, parent);\n                break;\n            } catch (e) {}\n\n            parent = grandpa;\n            grandpa = parent.parentElement;\n        }\n    },\n\n    /**\n     * Returns whitespace before specified token.\n     *\n     * @param {Object} token\n     * @returns {String}\n     */\n    getWhitespaceBefore: function(token) {\n        if (!token.getPreviousToken) {\n            console.log(token);\n        }\n        var prev = token.getPreviousToken();\n\n        if (prev && prev.isWhitespace) {\n            return prev.getSourceCode();\n        }\n\n        return '';\n    },\n\n    /**\n     * Returns the first token for the node from the AST.\n     *\n     * @param {Object} node\n     * @returns {Object}\n     */\n    getFirstNodeToken: function(node) {\n        return node.getFirstToken();\n    },\n\n    /**\n     * Returns the last token for the node from the AST.\n     *\n     * @param {Object} node\n     * @returns {Object}\n     */\n    getLastNodeToken: function(node) {\n        return node.getLastToken();\n    },\n\n    /**\n     * Returns the first token for the file.\n     *\n     * @param {Option} [options]\n     * @param {Boolean} [options.includeComments=false]\n     * @param {Boolean} [options.includeWhitespace=false]\n     * @returns {Object}\n     */\n    getFirstToken: function(/*options*/) {\n        return this._program.getFirstToken();\n    },\n\n    /**\n     * Returns the last token for the file.\n     *\n     * @param {Option} [options]\n     * @param {Boolean} [options.includeComments=false]\n     * @param {Boolean} [options.includeWhitespace=false]\n     * @returns {Object}\n     */\n    getLastToken: function(/*options*/) {\n        return this._program.getLastToken();\n    },\n\n    /**\n     * Returns the first token before the given.\n     *\n     * @param {Object} token\n     * @param {Object} [options]\n     * @param {Boolean} [options.includeComments=false]\n     * @returns {Object|undefined}\n     */\n    getPrevToken: function(token, options) {\n        if (options && options.includeComments) {\n            return token.getPreviousNonWhitespaceToken();\n        }\n\n        return token.getPreviousCodeToken();\n    },\n\n    /**\n     * Returns the first token after the given.\n     *\n     * @param {Object} token\n     * @param {Object} [options]\n     * @param {Boolean} [options.includeComments=false]\n     * @returns {Object|undefined}\n     */\n    getNextToken: function(token, options) {\n        if (options && options.includeComments) {\n            return token.getNextNonWhitespaceToken();\n        } else {\n            return token.getNextCodeToken();\n        }\n    },\n\n    /**\n     * Returns the first token before the given which matches type (and value).\n     *\n     * @param {Object} token\n     * @param {String} type\n     * @param {String} [value]\n     * @returns {Object|null}\n     */\n    findPrevToken: function(token, type, value) {\n        var prevToken = this.getPrevToken(token);\n        while (prevToken) {\n            if (prevToken.type === type && (value === undefined || prevToken.value === value)) {\n                return prevToken;\n            }\n\n            prevToken = this.getPrevToken(prevToken);\n        }\n        return prevToken;\n    },\n\n    /**\n     * Returns the first token after the given which matches type (and value).\n     *\n     * @param {Object} token\n     * @param {String} type\n     * @param {String} [value]\n     * @returns {Object|null}\n     */\n    findNextToken: function(token, type, value) {\n        var nextToken = token.getNextToken();\n\n        while (nextToken) {\n            if (nextToken.type === type && (value === undefined || nextToken.value === value)) {\n                return nextToken;\n            }\n\n            nextToken = nextToken.getNextToken();\n        }\n        return nextToken;\n    },\n\n    /**\n     * Returns the first token before the given which matches type (and value).\n     *\n     * @param {Object} token\n     * @param {String} value\n     * @returns {Object|null}\n     */\n    findPrevOperatorToken: function(token, value) {\n        return this.findPrevToken(token, value in KEYWORD_OPERATORS ? 'Keyword' : 'Punctuator', value);\n    },\n\n    /**\n     * Returns the first token after the given which matches type (and value).\n     *\n     * @param {Object} token\n     * @param {String} value\n     * @returns {Object|null}\n     */\n    findNextOperatorToken: function(token, value) {\n        return this.findNextToken(token, value in KEYWORD_OPERATORS ? 'Keyword' : 'Punctuator', value);\n    },\n\n    /**\n     * Iterates through the token tree using tree iterator.\n     * Calls passed function for every token.\n     *\n     * @param {Function} cb\n     * @param {Object} [tree]\n     */\n    iterate: function(cb, tree) {\n        return treeIterator.iterate(tree || this._program, cb);\n    },\n\n    /**\n     * Returns nodes by type(s) from earlier built index.\n     *\n     * @param {String|String[]} type\n     * @returns {Object[]}\n     */\n    getNodesByType: function(type) {\n        type = Array.isArray(type) ? type : [type];\n        var result = [];\n\n        for (var i = 0, l = type.length; i < l; i++) {\n            var nodes = this._program.selectNodesByType(type[i]);\n\n            if (nodes) {\n                result = result.concat(nodes);\n            }\n        }\n\n        return result;\n    },\n\n    /**\n     * Iterates nodes by type(s) from earlier built index.\n     * Calls passed function for every matched node.\n     *\n     * @param {String|String[]} type\n     * @param {Function} cb\n     * @param {Object} context\n     */\n    iterateNodesByType: function(type, cb, context) {\n        return this.getNodesByType(type).forEach(cb, context || this);\n    },\n\n    /**\n     * Iterates tokens by type(s) from the token array.\n     * Calls passed function for every matched token.\n     *\n     * @param {String|String[]} type\n     * @param {Function} cb\n     */\n    iterateTokensByType: function(type, cb) {\n        var tokens;\n\n        if (Array.isArray(type)) {\n            tokens = [];\n            for (var i = 0; i < type.length; i++) {\n                var items = this._program.selectTokensByType(type[i]);\n                tokens = tokens.concat(items);\n            }\n        } else {\n            tokens = this._program.selectTokensByType(type);\n        }\n\n        tokens.forEach(cb);\n    },\n\n    /**\n     * Iterates tokens by type and value(s) from the token array.\n     * Calls passed function for every matched token.\n     *\n     * @param {String} type\n     * @param {String|String[]} value\n     * @param {Function} cb\n     */\n    iterateTokensByTypeAndValue: function(type, value, cb) {\n        var values = (typeof value === 'string') ? [value] : value;\n        var valueIndex = {};\n        values.forEach(function(type) {\n            valueIndex[type] = true;\n        });\n\n        this.iterateTokensByType(type, function(token) {\n            if (valueIndex[token.value]) {\n                cb(token);\n            }\n        });\n    },\n\n    getFirstTokenOnLineWith: function(element, options) {\n        options = options || {};\n        var firstToken = element;\n\n        if (element.isComment && !options.includeComments) {\n            firstToken = null;\n        }\n\n        if (element.isWhitespace && !options.includeWhitespace) {\n            firstToken = null;\n        }\n\n        var currentToken = element.getPreviousToken();\n        while (currentToken) {\n            if (currentToken.isWhitespace) {\n                if (currentToken.getNewlineCount() > 0 || !currentToken.getPreviousToken()) {\n                    if (options.includeWhitespace) {\n                        firstToken = currentToken;\n                    }\n                    break;\n                }\n            } else if (currentToken.isComment) {\n                if (options.includeComments) {\n                    firstToken = currentToken;\n                    break;\n                }\n                if (currentToken.getNewlineCount() > 0) {\n                    break;\n                }\n            } else {\n                firstToken = currentToken;\n            }\n\n            currentToken = currentToken.getPreviousToken();\n        }\n\n        if (firstToken) {\n            return firstToken;\n        }\n\n        currentToken = element.getNextToken();\n        while (currentToken) {\n            if (currentToken.isWhitespace) {\n                if (currentToken.getNewlineCount() > 0 || !currentToken.getNextToken()) {\n                    if (options.includeWhitespace) {\n                        firstToken = currentToken;\n                    }\n                    break;\n                }\n            } else if (currentToken.isComment) {\n                if (options.includeComments) {\n                    firstToken = currentToken;\n                    break;\n                }\n                if (currentToken.getNewlineCount() > 0) {\n                    break;\n                }\n            } else {\n                firstToken = currentToken;\n            }\n\n            currentToken = currentToken.getNextToken();\n        }\n\n        return firstToken;\n    },\n\n    /**\n     * Returns last token for the specified line.\n     * Line numbers start with 1.\n     *\n     * @param {Number} lineNumber\n     * @param {Object} [options]\n     * @param {Boolean} [options.includeComments = false]\n     * @param {Boolean} [options.includeWhitespace = false]\n     * @returns {Object|null}\n     */\n    getLastTokenOnLine: function(lineNumber, options) {\n        options = options || {};\n\n        var loc;\n        var token = this._program.getLastToken();\n        var currentToken;\n\n        while (token) {\n            loc = token.getLoc();\n            currentToken = token;\n            token = token.getPreviousToken();\n\n            if (loc.start.line <= lineNumber && loc.end.line >= lineNumber) {\n\n                // Since whitespace tokens can contain newlines we need to check\n                // if position is in the range, not exact match\n                if (currentToken.isWhitespace && !options.includeWhitespace) {\n                    continue;\n                }\n            }\n\n            if (loc.start.line === lineNumber || loc.end.line === lineNumber) {\n                if (currentToken.isComment && !options.includeComments) {\n                    continue;\n                }\n\n                return currentToken;\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Returns which dialect of JS this file supports.\n     *\n     * @returns {String}\n     */\n    getDialect: function() {\n        if (this._es3) {\n            return 'es3';\n        }\n\n        return 'es6';\n    },\n\n    /**\n     * Returns string representing contents of the file.\n     *\n     * @returns {String}\n     */\n    getSource: function() {\n        return this._source;\n    },\n\n    /**\n     * Returns token program.\n     *\n     * @returns {Object}\n     */\n    getTree: function() {\n        return this._program || {};\n    },\n\n    /**\n     * Returns comment token list.\n     */\n    getComments: function() {\n        var comments = [];\n        var token = this._program.getFirstToken();\n        while (token) {\n            if (token.isComment) {\n                comments[comments.length] = token;\n            }\n            token = token.getNextToken();\n        }\n        return comments;\n    },\n\n    /**\n     * Returns source filename for this object representation.\n     *\n     * @returns {String}\n     */\n    getFilename: function() {\n        return this._filename;\n    },\n\n    /**\n     * Returns array of source lines for the file.\n     *\n     * @returns {String[]}\n     */\n    getLines: function() {\n        return this._lines;\n    },\n\n    /**\n     * Returns analyzed scope.\n     *\n     * @returns {Object}\n     */\n    getScopes: function() {\n        if (!this._scopes) {\n            this._scopes = new ScopesApi(this._program);\n        }\n\n        return this._scopes;\n    },\n\n    /**\n     * Are tokens on the same line.\n     *\n     * @param {Element} tokenBefore\n     * @param {Element} tokenAfter\n     * @return {Boolean}\n     */\n    isOnTheSameLine: function(tokenBefore, tokenAfter) {\n        if (tokenBefore === tokenAfter) {\n            return true;\n        }\n        tokenBefore = tokenBefore instanceof Token ? tokenBefore : tokenBefore.getLastToken();\n        tokenAfter = tokenAfter instanceof Token ? tokenAfter : tokenAfter.getFirstToken();\n        var currentToken = tokenBefore;\n        while (currentToken) {\n            if (currentToken === tokenAfter) {\n                return true;\n            }\n            if (currentToken !== tokenBefore && currentToken.getNewlineCount() > 0) {\n                return false;\n            }\n            currentToken = currentToken.getNextToken();\n        }\n        return false;\n    },\n\n    getDistanceBetween: function(tokenBefore, tokenAfter) {\n        if (tokenBefore === tokenAfter) {\n            return 0;\n        }\n        tokenBefore = tokenBefore instanceof Token ? tokenBefore : tokenBefore.getLastToken();\n        tokenAfter = tokenAfter instanceof Token ? tokenAfter : tokenAfter.getFirstToken();\n        var currentToken = tokenBefore.getNextToken();\n        var distance = 0;\n        while (currentToken) {\n            if (currentToken === tokenAfter) {\n                break;\n            }\n\n            distance += currentToken.getSourceCodeLength();\n            currentToken = currentToken.getNextToken();\n        }\n        return distance;\n    },\n\n    getLineCountBetween: function(tokenBefore, tokenAfter) {\n        if (tokenBefore === tokenAfter) {\n            return 0;\n        }\n        tokenBefore = tokenBefore instanceof Token ? tokenBefore : tokenBefore.getLastToken();\n        tokenAfter = tokenAfter instanceof Token ? tokenAfter : tokenAfter.getFirstToken();\n\n        var currentToken = tokenBefore.getNextToken();\n        var lineCount = 0;\n        while (currentToken) {\n            if (currentToken === tokenAfter) {\n                break;\n            }\n\n            lineCount += currentToken.getNewlineCount();\n            currentToken = currentToken.getNextToken();\n        }\n        return lineCount;\n    },\n\n    /**\n     * Returns array of source lines for the file with comments removed.\n     *\n     * @returns {Array}\n     */\n    getLinesWithCommentsRemoved: function() {\n        var lines = this.getLines().concat();\n\n        this.getComments().concat().reverse().forEach(function(comment) {\n            var loc = comment.getLoc();\n            var startLine = loc.start.line;\n            var startCol = loc.start.column;\n            var endLine = loc.end.line;\n            var endCol = loc.end.column;\n            var i = startLine - 1;\n\n            if (startLine === endLine) {\n                // Remove tralling spaces (see gh-1968)\n                lines[i] = lines[i].replace(/\\*\\/\\s+/, '\\*\\/');\n                lines[i] = lines[i].substring(0, startCol) + lines[i].substring(endCol);\n            } else {\n                lines[i] = lines[i].substring(0, startCol);\n                for (var x = i + 1; x < endLine - 1; x++) {\n                    lines[x] = '';\n                }\n\n                lines[x] = lines[x].substring(endCol);\n            }\n        });\n\n        return lines;\n    },\n\n    /**\n     * Renders JS-file sources using token list.\n     *\n     * @returns {String}\n     */\n    render: function() {\n        return this._program.getSourceCode();\n    },\n\n    /**\n     * Returns list of parse errors.\n     *\n     * @returns {Error[]}\n     */\n    getParseErrors: function() {\n        return this._parseErrors;\n    }\n};\n\nmodule.exports = JsFile;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/tree-iterator.js":"var estraverse = require('estraverse');\nvar VISITOR_KEYS = require('cst').visitorKeys;\n\nmodule.exports.iterate = function iterate(node, cb) {\n    if ('type' in node) {\n        estraverse.traverse(node, {\n            enter: function(node, parent) {\n                var parentCollection = [];\n\n                // parentCollection support\n                var path = this.path();\n                if (path) {\n                    var collectionKey;\n                    while (path.length > 0) {\n                        var pathElement = path.pop();\n                        if (typeof pathElement === 'string') {\n                            collectionKey = pathElement;\n                            break;\n                        }\n                    }\n\n                    parentCollection = parent[collectionKey];\n                    if (!Array.isArray(parentCollection)) {\n                        parentCollection = [parentCollection];\n                    }\n                }\n\n                if (cb(node, parent, parentCollection) === false) {\n                    return estraverse.VisitorOption.Skip;\n                }\n            },\n            keys: VISITOR_KEYS\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/token-index.js":"var assign = require('lodash').assign;\n\nvar BLOCK_REGEXP = /^\\s*(?:jscs\\s*:\\s*(en|dis)able)(.*)/;\nvar LINE_REGEXP = /^\\s*(?:jscs\\s*:\\s*ignore)(.*)/;\n\n/**\n * Parses rule names in enable/disable/ignore statements.\n *\n * @param {String} text\n * @param {Boolean} enabled\n * @returns {Object}\n */\nfunction parseRuleNames(text, enabled) {\n    text = text.trim();\n\n    if (!text) {\n        return {'*': enabled};\n    }\n\n    return text.split(',').reduce(function(result, ruleName) {\n        ruleName = ruleName.trim();\n        if (ruleName) {\n            result[ruleName] = enabled;\n        }\n        return result;\n    }, {});\n}\n\n/**\n * Pragma index implementation.\n * Checks if rule is enabled or disabled for the specified element.\n *\n * @param {Element} firstToken\n * @constructor\n */\nfunction TokenIndex(firstToken) {\n    this._buildIndex(firstToken);\n}\n\n/**\n * Builds pragma index.\n *\n * @param {Element} firstToken\n * @private\n */\nTokenIndex.prototype._buildIndex = function(firstToken) {\n    this._hasPragmas = false;\n\n    var tokens = [];\n    var index = [];\n    var positions = [];\n    var currentPosition = 0;\n    var currentToken = firstToken;\n    var lastBlockState = {'*': true};\n    var tokenState;\n    var previousLoc = {line: 1, column: 0};\n\n    while (currentToken) {\n        tokens.push(currentToken);\n        currentToken.__loc = previousLoc;\n\n        var newlineCount = currentToken.getNewlineCount();\n        if (newlineCount > 0) {\n            var lines = currentToken.getSourceCodeLines();\n            previousLoc = {\n                line: previousLoc.line + newlineCount,\n                column: lines[lines.length - 1].length\n            };\n        } else {\n            previousLoc = {\n                line: previousLoc.line,\n                column: previousLoc.column + currentToken.getSourceCodeLength()\n            };\n        }\n\n        if (currentToken.isComment) {\n            var value = currentToken.value;\n            var blockMatch = BLOCK_REGEXP.exec(value);\n            if (blockMatch) {\n                this._hasPragmas = true;\n                lastBlockState = assign({}, lastBlockState, parseRuleNames(blockMatch[2], blockMatch[1] === 'en'));\n                tokenState = lastBlockState;\n            } else {\n                var lineMatch = LINE_REGEXP.exec(value);\n                if (lineMatch) {\n                    this._hasPragmas = true;\n                    var ignoreState = parseRuleNames(lineMatch[1], false);\n                    index.push(null);\n                    var ignoreToken = currentToken.getPreviousToken();\n                    var i = index.length - 1;\n                    while (ignoreToken) {\n                        i--;\n                        index[i] = assign({}, index[i], ignoreState);\n                        if (ignoreToken.getNewlineCount() > 0) {\n                            break;\n                        }\n                        ignoreToken = ignoreToken.getPreviousToken();\n                    }\n                    ignoreToken = currentToken.getNextToken();\n                    while (ignoreToken) {\n                        index.push(ignoreState);\n                        if (ignoreToken.getNewlineCount() > 0) {\n                            break;\n                        }\n                        ignoreToken = ignoreToken.getNextToken();\n                    }\n                    tokenState = assign({}, lastBlockState, ignoreState);\n                } else {\n                    tokenState = lastBlockState;\n                }\n            }\n        } else {\n            tokenState = lastBlockState;\n        }\n\n        if (index[currentPosition]) {\n            tokenState = assign({}, tokenState, index[currentPosition]);\n        }\n\n        index[currentPosition] = tokenState;\n        currentPosition++;\n\n        currentToken = currentToken.getNextToken();\n    }\n    this._tokens = tokens;\n    this._index = index;\n    this._positions = positions;\n};\n\n/**\n * Checks if rule whether rule is enabled for the specified element.\n *\n * @param {String} ruleName\n * @param {Element} element\n * @returns {Boolean}\n */\nTokenIndex.prototype.isRuleEnabled = function(ruleName, element) {\n    if (!this._hasPragmas) {\n        return true;\n    }\n    var pos = this._tokens.indexOf(element.getFirstToken());\n    if (pos !== -1) {\n        var state = this._index[pos];\n        if (ruleName in state) {\n            return state[ruleName];\n        }\n\n        return state['*'];\n    }\n\n    return true;\n};\n\n/**\n * Return calculated element location.\n *\n * @param {Element} element\n * @returns {Object}\n */\nTokenIndex.prototype.getElementLoc = function(element) {\n    return element.getFirstToken().__loc ||  {\n        line: 1,\n        column: 0\n    };\n};\n\nmodule.exports = TokenIndex;\n\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/config/configuration.js":"var assert = require('assert');\nvar path = require('path');\nvar fs = require('fs');\n\nvar minimatch = require('minimatch');\nvar defaults = {\n    cwd: '.',\n    maxErrors: 50\n};\n\nvar _ = require('lodash');\n\nvar BUILTIN_OPTIONS = {\n    plugins: true,\n    preset: true,\n    excludeFiles: true,\n    additionalRules: true,\n    fileExtensions: true,\n    extract: true,\n    maxErrors: true,\n    configPath: true,\n    es3: true,\n    errorFilter: true,\n    fix: true\n};\n\n/**\n * JSCS Configuration.\n * Browser/Rhino-compatible.\n *\n * @name Configuration\n */\nfunction Configuration() {\n    /**\n     * List of the registered (not used) presets.\n     *\n     * @protected\n     * @type {Object}\n     */\n    this._presets = {};\n\n    /**\n     * Name of the preset (if used).\n     *\n     * @protected\n     * @type {String|null}\n     */\n    this._presetName = null;\n\n    /**\n     * List of loaded presets.\n     *\n     * @protected\n     * @type {String|null}\n     */\n    this._loadedPresets = [];\n\n    /**\n     * List of rules instances.\n     *\n     * @protected\n     * @type {Object}\n     */\n    this._rules = {};\n\n    /**\n     * List of configurated rule instances.\n     *\n     * @protected\n     * @type {Object}\n     */\n    this._ruleSettings = {};\n\n    /**\n     * List of configured rules.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._configuredRules = [];\n\n    /**\n     * List of unsupported rules.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._unsupportedRuleNames = [];\n\n    /**\n     * File extensions that would be checked.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._fileExtensions = [];\n\n    /**\n     * List of defined options (not complete).\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._definedOptions = [];\n\n    /**\n     * Default file extensions that would be checked.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._defaultFileExtensions = ['.js'];\n\n    /**\n     * Exclusion masks.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._excludedFileMasks = [];\n\n    /**\n     * Default exclusion masks, will be rewritten if user has their own masks.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._defaultExcludedFileMasks = ['.git/**', 'node_modules/**'];\n\n    /**\n     * List of existing files that falls under exclusion masks.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._excludedFileMatchers = [];\n\n    /**\n     * Extraction masks.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._extractFileMasks = [];\n\n    /**\n     * Default extractions masks.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._defaultExtractFileMasks = ['**/*.+(htm|html|xhtml)'];\n\n    /**\n     * List of file matchers from which to extract JavaScript.\n     *\n     * @protected\n     * @type {Array}\n     */\n    this._extractFileMatchers = [];\n\n    /**\n     * Maxixum amount of error that would be reportered.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this._maxErrors = defaults.maxErrors;\n\n    /**\n     * JSCS CWD.\n     *\n     * @protected\n     * @type {String}\n     */\n    this._basePath = defaults.cwd;\n\n    /**\n     * List of overrided options (usually from CLI).\n     *\n     * @protected\n     * @type {Object}\n     */\n    this._overrides = {};\n\n    /**\n     * Is \"ES3\" mode enabled?.\n     *\n     * @protected\n     * @type {Boolean}\n     */\n    this._es3Enabled = false;\n\n    /**\n     * A filter function that determines whether or not to report an error.\n     *\n     * @protected\n     * @type {Function|null}\n     */\n    this._errorFilter = null;\n}\n\n/**\n * Load settings from a configuration.\n *\n * @param {Object} config\n */\nConfiguration.prototype.load = function(config) {\n\n    // Load all the options\n    this._processConfig(config);\n\n    // Load defaults if they weren't set\n    this._loadDefaults(config);\n\n    // Load and apply all the rules\n    this._useRules();\n};\n\n/**\n * Load default values for options which were not defined\n *\n * @private\n */\nConfiguration.prototype._loadDefaults = function() {\n    if (!this._isDefined('excludeFiles')) {\n        this._loadExcludedFiles(this._defaultExcludedFileMasks);\n    }\n\n    if (!this._isDefined('fileExtensions')) {\n        this._loadFileExtensions(this._defaultFileExtensions);\n    }\n};\n\n/**\n * Returns resulting configuration after preset is applied and options are processed.\n *\n * @return {Object}\n */\nConfiguration.prototype.getProcessedConfig = function() {\n    var result = {};\n    Object.keys(this._ruleSettings).forEach(function(key) {\n        result[key] = this._ruleSettings[key];\n    }, this);\n    result.excludeFiles = this._excludedFileMasks;\n    result.fileExtensions = this._fileExtensions;\n    result.extract = this._extractFileMasks;\n    result.maxErrors = this._maxErrors;\n    result.preset = this._presetName;\n    result.es3 = this._es3Enabled;\n    result.errorFilter = this._errorFilter;\n    return result;\n};\n\n/**\n * Returns list of configured rules.\n *\n * @returns {Rule[]}\n */\nConfiguration.prototype.getConfiguredRules = function() {\n    return this._configuredRules;\n};\n\n/**\n * Returns configured rule.\n *\n * @returns {Rule | null}\n */\nConfiguration.prototype.getConfiguredRule = function(name) {\n    return this._configuredRules.filter(function(rule) {\n        return rule.getOptionName() === name;\n    })[0] || null;\n};\n\n/**\n * Returns the list of unsupported rule names.\n *\n * @return {String[]}\n */\nConfiguration.prototype.getUnsupportedRuleNames = function() {\n    return this._unsupportedRuleNames;\n};\n\n/**\n * Returns excluded file mask list.\n *\n * @returns {String[]}\n */\nConfiguration.prototype.getExcludedFileMasks = function() {\n    return this._excludedFileMasks;\n};\n\n/**\n * Returns `true` if specified file path is excluded.\n *\n * @param {String} filePath\n * @returns {Boolean}\n */\nConfiguration.prototype.isFileExcluded = function(filePath) {\n    filePath = path.resolve(filePath);\n\n    return this._excludedFileMatchers.some(function(matcher) {\n        return matcher.match(filePath);\n    });\n};\n\n/**\n * Returns true if the file extension matches a file extension to process.\n *\n * @returns {Boolean}\n */\nConfiguration.prototype.hasCorrectExtension = function(testPath) {\n    var extension = path.extname(testPath).toLowerCase();\n    var basename = path.basename(testPath).toLowerCase();\n    var fileExtensions = this.getFileExtensions();\n\n    return !(\n        fileExtensions.indexOf(extension) < 0 &&\n        fileExtensions.indexOf(basename) < 0 &&\n        fileExtensions.indexOf('*') < 0\n    );\n};\n\n/**\n * Returns file extension list.\n *\n * @returns {String[]}\n */\nConfiguration.prototype.getFileExtensions = function() {\n    return this._fileExtensions;\n};\n\n/**\n * Returns extract file masks.\n *\n * @returns {String[]}\n */\nConfiguration.prototype.getExtractFileMasks = function() {\n    return this._extractFileMasks;\n};\n\n/**\n * Should filePath to be extracted?\n *\n * @returns {Boolean}\n */\nConfiguration.prototype.shouldExtractFile = function(filePath) {\n    filePath = path.resolve(filePath);\n    return this._extractFileMatchers.some(function(matcher) {\n        return matcher.match(filePath);\n    });\n};\n\n/**\n * Returns maximal error count.\n *\n * @returns {Number|null}\n */\nConfiguration.prototype.getMaxErrors = function() {\n    return this._maxErrors;\n};\n\n/**\n * Getter \"fix\" option value.\n *\n * @return {Boolean}\n */\nConfiguration.prototype.getFix = function() {\n    return !!this._fix;\n};\n\n/**\n * Returns `true` if `es3` option is enabled.\n *\n * @returns {Boolean}\n */\nConfiguration.prototype.isES3Enabled = function() {\n    return this._es3Enabled;\n};\n\n/**\n * Returns the loaded error filter.\n *\n * @returns {Function|null}\n */\nConfiguration.prototype.getErrorFilter = function() {\n    return this._errorFilter;\n};\n\n/**\n * Returns base path.\n *\n * @returns {String}\n */\nConfiguration.prototype.getBasePath = function() {\n    return this._basePath;\n};\n\n/**\n * Overrides specified settings.\n *\n * @param {String} overrides\n */\nConfiguration.prototype.override = function(overrides) {\n    Object.keys(overrides).forEach(function(key) {\n        this._overrides[key] = overrides[key];\n    }, this);\n};\n\n/**\n * returns options, but not rules, from the provided config\n *\n * @param  {Object} config\n * @returns {Object}\n */\nConfiguration.prototype._getOptionsFromConfig = function(config) {\n    return Object.keys(config).reduce(function(options, key) {\n        if (BUILTIN_OPTIONS[key]) {\n            options[key] = config[key];\n        }\n        return options;\n    }, {});\n};\n\nConfiguration.prototype._errorOnRemovedOptions = function(config) {\n    var errors = ['Config values to remove in 3.0:'];\n\n    if (config.hasOwnProperty('esprima')) {\n        errors.push('The `esprima` option since CST uses babylon (the babel parser) under the hood');\n    }\n\n    if (config.hasOwnProperty('esprimaOptions')) {\n        errors.push('The `esprimaOptions` option.');\n    }\n\n    if (config.hasOwnProperty('esnext')) {\n        errors.push('The `esnext` option is enabled by default.');\n    }\n\n    if (config.hasOwnProperty('verbose')) {\n        errors.push('The `verbose` option is enabled by default.');\n    }\n\n    if (errors.length > 1) {\n        throw new Error(errors.join('\\n'));\n    }\n};\n\n/**\n * Processes configuration and returns config options.\n *\n * @param {Object} config\n */\nConfiguration.prototype._processConfig = function(config) {\n    var overrides = this._overrides;\n    var currentConfig = {};\n\n    // Copy configuration so original config would be intact\n    copyConfiguration(config, currentConfig);\n\n    // Override the properties\n    copyConfiguration(overrides, currentConfig);\n\n    this._errorOnRemovedOptions(currentConfig);\n\n    // NOTE: options is a separate object to ensure that future options must be added\n    // to BUILTIN_OPTIONS to work, which also assures they aren't mistaken for a rule\n    var options = this._getOptionsFromConfig(currentConfig);\n\n    // Base path\n    if (this._basePath === defaults.cwd && options.configPath) {\n        assert(\n            typeof options.configPath === 'string',\n            '`configPath` option requires string value'\n        );\n        this._basePath = path.dirname(options.configPath);\n    }\n\n    if (options.hasOwnProperty('plugins')) {\n        assert(Array.isArray(options.plugins), '`plugins` option requires array value');\n        options.plugins.forEach(function(plugin) {\n            this._loadPlugin(plugin, options.configPath);\n        }, this);\n\n        if (!this._isDefined('plugins')) {\n            this._definedOptions.push('plugins');\n        }\n    }\n\n    if (options.hasOwnProperty('additionalRules')) {\n        assert(Array.isArray(options.additionalRules), '`additionalRules` option requires array value');\n        options.additionalRules.forEach(function(rule) {\n            this._loadAdditionalRule(rule, options.configPath);\n        }, this);\n\n        if (!this._isDefined('additionalRules')) {\n            this._definedOptions.push('additionalRules');\n        }\n    }\n\n    if (options.hasOwnProperty('extract')) {\n        this._loadExtract(options.extract);\n    }\n\n    if (options.hasOwnProperty('fileExtensions')) {\n        this._loadFileExtensions(options.fileExtensions);\n    }\n\n    if (options.hasOwnProperty('excludeFiles')) {\n        this._loadExcludedFiles(options.excludeFiles);\n    }\n\n    if (options.hasOwnProperty('fix')) {\n        this._loadFix(options.fix);\n    }\n\n    this._loadMaxError(options);\n\n    if (options.hasOwnProperty('es3')) {\n        this._loadES3(options.es3);\n    }\n\n    if (options.hasOwnProperty('errorFilter')) {\n        this._loadErrorFilter(options.errorFilter, options.configPath);\n    }\n\n    // Apply presets\n    if (options.hasOwnProperty('preset')) {\n        this._loadPreset(options.preset, options.configPath);\n    }\n\n    this._loadRules(currentConfig);\n};\n\n/**\n * Loads plugin data.\n *\n * @param {function(Configuration)} plugin\n * @protected\n */\nConfiguration.prototype._loadPlugin = function(plugin) {\n    assert(typeof plugin === 'function', '`plugin` should be a function');\n    plugin(this);\n};\n\n/**\n * Load rules.\n *\n * @param {Object} config\n * @protected\n */\nConfiguration.prototype._loadRules = function(config) {\n    Object.keys(config).forEach(function(key) {\n\n        // Only rules should be processed\n        if (BUILTIN_OPTIONS[key]) {\n            return;\n        }\n\n        if (this._rules[key]) {\n            var optionValue = config[key];\n\n            // Disable rule it it equals \"false\" or \"null\"\n            if (optionValue === null || optionValue === false) {\n                delete this._ruleSettings[key];\n\n            } else {\n                this._ruleSettings[key] = config[key];\n            }\n\n        } else if (this._unsupportedRuleNames.indexOf(key) === -1) {\n            this._unsupportedRuleNames.push(key);\n        }\n    }, this);\n};\n\n/**\n * Loads an error filter.\n *\n * @param {Function|null} errorFilter\n * @protected\n */\nConfiguration.prototype._loadErrorFilter = function(errorFilter) {\n    assert(\n        typeof errorFilter === 'function' ||\n        errorFilter === null,\n        '`errorFilter` option requires a function or null value'\n    );\n    this._errorFilter = errorFilter;\n\n    if (!this._isDefined('errorFilter')) {\n        this._definedOptions.push('errorFilter');\n    }\n};\n\n/**\n * Load \"es3\" option.\n *\n * @param {Boolean} es3\n * @protected\n */\nConfiguration.prototype._loadES3 = function(es3) {\n    assert(\n        typeof es3 === 'boolean' || es3 === null,\n        '`es3` option requires boolean or null value'\n    );\n    this._es3Enabled = Boolean(es3);\n\n    if (!this._isDefined('es3')) {\n        this._definedOptions.push('es3');\n    }\n};\n\n/**\n * Load \"maxError\" option.\n *\n * @param {Object} options\n * @protected\n */\nConfiguration.prototype._loadMaxError = function(options) {\n\n    // If \"fix\" option is enabled, set to Inifinity, otherwise this option\n    // doesn't make sense with \"fix\" conjunction\n    if (this._fix === true) {\n        this._maxErrors = Infinity;\n\n        return;\n    }\n\n    if (!options.hasOwnProperty('maxErrors')) {\n        return;\n    }\n\n    var maxErrors = options.maxErrors === null ? null : Number(options.maxErrors);\n\n    assert(\n        maxErrors === -1 || maxErrors > 0 || maxErrors === null,\n        '`maxErrors` option requires -1, null value or positive number'\n    );\n\n    this._maxErrors = maxErrors;\n\n    if (!this._isDefined('fix')) {\n        this._definedOptions.push('fix');\n    }\n};\n\n/**\n * Load \"fix\" option.\n *\n * @param {Boolean|null} fix\n * @protected\n */\nConfiguration.prototype._loadFix = function(fix) {\n    fix = fix === null ? false : fix;\n\n    assert(\n        typeof fix === 'boolean',\n        '`fix` option requires boolean or null value'\n    );\n\n    this._fix = fix;\n\n    if (!this._isDefined('fix')) {\n        this._definedOptions.push('fix');\n    }\n};\n\n/**\n * Load preset.\n *\n * @param {Object} preset\n * @protected\n */\nConfiguration.prototype._loadPreset = function(preset) {\n    if (this._loadedPresets.indexOf(preset) > -1) {\n        return;\n    }\n\n    // Do not keep adding preset from CLI (#2087)\n    delete this._overrides.preset;\n\n    this._loadedPresets.push(preset);\n\n    // If preset is loaded from another preset - preserve the original name\n    if (!this._presetName) {\n        this._presetName = preset;\n    }\n    assert(typeof preset === 'string', '`preset` option requires string value');\n\n    var presetData = this._presets[preset];\n    assert(Boolean(presetData), 'Preset \"' + preset + '\" does not exist');\n\n    if (!this._isDefined('preset')) {\n        this._definedOptions.push('preset');\n    }\n\n    // Process config from the preset\n    this._processConfig(this._presets[preset]);\n};\n\n/**\n * Load file extensions.\n *\n * @param {String|Array} extensions\n * @protected\n */\nConfiguration.prototype._loadFileExtensions = function(extensions) {\n    assert(\n        typeof extensions === 'string' || Array.isArray(extensions),\n        '`fileExtensions` option requires string or array value'\n    );\n\n    this._fileExtensions = this._fileExtensions.concat(extensions).map(function(ext) {\n        return ext.toLowerCase();\n    });\n\n    if (!this._isDefined('fileExtensions')) {\n        this._definedOptions.push('fileExtensions');\n    }\n};\n\n/**\n * Is option defined?\n *\n * @param {String} name - name of the option\n *\n * @return {Boolean}\n */\nConfiguration.prototype._isDefined = function(name) {\n    return this._definedOptions.indexOf(name) > -1;\n};\n\n/**\n * Load excluded paths.\n *\n * @param {Array} masks\n * @protected\n */\nConfiguration.prototype._loadExcludedFiles = function(masks) {\n    assert(Array.isArray(masks), '`excludeFiles` option requires array value');\n\n    this._excludedFileMasks = this._excludedFileMasks.concat(masks);\n    this._excludedFileMatchers = this._excludedFileMasks.map(function(fileMask) {\n        return new minimatch.Minimatch(path.resolve(this._basePath, fileMask), {\n            dot: true\n        });\n    }, this);\n\n    if (!this._isDefined('excludeFiles')) {\n        this._definedOptions.push('excludeFiles');\n    }\n};\n\n/**\n * Load paths for extract.\n *\n * @param {Array} masks\n * @protected\n */\nConfiguration.prototype._loadExtract = function(masks) {\n    if (masks === true) {\n        masks = this._defaultExtractFileMasks;\n    } else if (masks === false) {\n        masks = [];\n    }\n\n    assert(Array.isArray(masks), '`extract` option should be array of strings');\n    this._extractFileMasks = masks.slice();\n    this._extractFileMatchers = this._extractFileMasks.map(function(fileMask) {\n        return new minimatch.Minimatch(path.resolve(this._basePath, fileMask), {\n            dot: true\n        });\n    }, this);\n\n    if (!this._isDefined('extract')) {\n        this._definedOptions.push('extract');\n    }\n};\n\n/**\n * Loads additional rule.\n *\n * @param {Rule} additionalRule\n * @protected\n */\nConfiguration.prototype._loadAdditionalRule = function(additionalRule) {\n    assert(typeof additionalRule === 'object', '`additionalRule` should be an object');\n    this.registerRule(additionalRule);\n};\n\n/**\n * Includes plugin in the configuration environment.\n *\n * @param {function(Configuration)|*} plugin\n */\nConfiguration.prototype.usePlugin = function(plugin) {\n    this._loadPlugin(plugin);\n};\n\n/**\n * Apply the rules.\n *\n * @protected\n */\nConfiguration.prototype._useRules = function() {\n    this._configuredRules = [];\n\n    Object.keys(this._ruleSettings).forEach(function(optionName) {\n        var rule = this._rules[optionName];\n        rule.configure(this._ruleSettings[optionName]);\n        this._configuredRules.push(rule);\n    }, this);\n};\n\n/**\n * Adds rule to the collection.\n *\n * @param {Rule|Function} rule Rule instance or rule class.\n */\nConfiguration.prototype.registerRule = function(rule) {\n    if (typeof rule === 'function') {\n        var RuleClass = rule;\n        rule = new RuleClass();\n    }\n\n    var optionName = rule.getOptionName();\n    assert(!this._rules.hasOwnProperty(optionName), 'Rule \"' + optionName + '\" is already registered');\n    this._rules[optionName] = rule;\n};\n\n/**\n * Returns list of registered rules.\n *\n * @returns {Rule[]}\n */\nConfiguration.prototype.getRegisteredRules = function() {\n    var rules = this._rules;\n    return Object.keys(rules).map(function(ruleOptionName) {\n        return rules[ruleOptionName];\n    });\n};\n\n/**\n * Adds preset to the collection.\n *\n * @param {String} presetName\n * @param {Object} presetConfig\n */\nConfiguration.prototype.registerPreset = function(presetName, presetConfig) {\n    assert(_.isPlainObject(presetConfig), 'Preset should be an object');\n\n    for (var key in presetConfig) {\n        assert(typeof presetConfig[key] !== 'function', 'Preset should be an JSON object');\n    }\n\n    this._presets[presetName] = presetConfig;\n};\n\n/**\n * Returns registered presets object (key - preset name, value - preset content).\n *\n * @returns {Object}\n */\nConfiguration.prototype.getRegisteredPresets = function() {\n    return this._presets;\n};\n\n/**\n * Returns `true` if preset with specified name exists.\n *\n * @param {String} presetName\n * @return {Boolean}\n */\nConfiguration.prototype.hasPreset = function(presetName) {\n    return this._presets.hasOwnProperty(presetName);\n};\n\n/**\n * Returns name of the active preset.\n *\n * @return {String}\n */\nConfiguration.prototype.getPresetName = function() {\n    return this._presetName;\n};\n\n/**\n * Registers built-in Code Style cheking rules.\n */\nConfiguration.prototype.registerDefaultRules = function() {\n    var dir = path.join(__dirname, '../rules');\n\n    fs.readdirSync(dir).forEach(function(rule) {\n        this.registerRule(\n            require(path.join(dir, rule))\n        );\n    }, this);\n};\n\n/**\n * Registers built-in Code Style cheking presets.\n */\nConfiguration.prototype.registerDefaultPresets = function() {\n    var dir = path.join(__dirname, '../../presets/');\n\n    fs.readdirSync(dir).forEach(function(preset) {\n        var name = preset.split('.')[0];\n        var p = path.join(dir, preset);\n\n        this.registerPreset(name, require(p));\n    }, this);\n\n    this.registerPreset('wikimedia', require('jscs-preset-wikimedia'));\n};\n\nmodule.exports = Configuration;\n\nfunction copyConfiguration(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        dest[key] = source[key];\n    });\n    if (source.configPath) {\n        dest.configPath = source.configPath;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/extract-js.js":"var htmlparser = require('htmlparser2');\nvar Errors = require('./errors');\nvar rLineSplit = /\\r\\n|\\r|\\n/;\nvar rHasNonWhitespace = /\\S/;\n\n/**\n * Html file representation (needed for errors output).\n *\n * @name HtmlFile\n * @param {Object} params\n * @param {String} params.filename\n * @param {String} params.source\n */\nvar HtmlFile = function(params) {\n    this._filename = params.filename;\n    this._lines = params.source.split(rLineSplit);\n};\n\nHtmlFile.prototype = {\n    /**\n     * Returns source filename for this object representation.\n     *\n     * @returns {String}\n     */\n    getFilename: function() {\n        return this._filename;\n    },\n\n    /**\n     * Returns array of source lines for the file.\n     *\n     * @returns {String[]}\n     */\n    getLines: function() {\n        return this._lines;\n    }\n};\n\n/**\n * Parse html and retrieve script sources.\n *\n * @param {String} html\n * @returns {Object[]}\n */\nfunction getScripts(html) {\n    function onopen(name, attrs) {\n        // tag should be a <script>\n        if (name !== 'script' ||\n            // ignore scripts with src attribute\n            attrs.src ||\n            // script tag should has no type attribute or attribute should be equal to text/javascript\n            (attrs.type && attrs.type.toLowerCase() !== 'text/javascript')) {\n            return;\n        }\n\n        // store script content start pos\n        scriptStartPos = parser.endIndex + 1;\n    }\n\n    function onclose() {\n        if (!scriptStartPos) {\n            return;\n        }\n\n        // get script content\n        var scriptEndPos = parser.startIndex;\n        var source = html.substring(scriptStartPos, scriptEndPos);\n\n        // store script content only if it contains non-whitespace characters\n        if (rHasNonWhitespace.test(source)) {\n            scripts.push({\n                source: source,\n                start: scriptStartPos,\n                end: scriptEndPos\n            });\n        }\n\n        // reset script start position\n        scriptStartPos = 0;\n    }\n\n    var scriptStartPos = 0;\n    var scripts = [];\n    var parser = new htmlparser.Parser({\n        onopentag: onopen,\n        onclosetag: onclose\n    });\n\n    parser.parseComplete(html);\n\n    return scripts;\n}\n\n/**\n * JavaScript in HTML usually shifted based on first JS line. For example\n * if first line of fragment is offset by 4 spaces, each line in this\n * fragment will have offset 4 to restore the original column.\n * This function trim script source and normalize lines offset.\n *\n * @param {String} source\n * @returns {Object[]}\n */\nfunction normalizeSource(source) {\n    var lines = source.split(rLineSplit);\n    var lineCount = lines.length;\n    var tabOnlyOffset = false;\n    var spaceOnlyOffset = false;\n    var offset;\n\n    // remove first list if it's an empty string\n    // usually <script> starts with new line\n    if (!rHasNonWhitespace.test(lines[0])) {\n        lines.shift();\n    }\n\n    // replace last line by empty string if it contains only whitespaces\n    // it helps avoid disallowTrailingWhitespace errors on last line\n    if (!rHasNonWhitespace.test(lines[lines.length - 1])) {\n        lines[lines.length - 1] = '';\n    }\n\n    // calculate min line offset\n    offset = Math.min.apply(null, lines.map(function(line) {\n        // skip empty lines\n        if (!line) {\n            return Infinity;\n        }\n\n        // fetch whitespaces at the line beginning\n        var offsetStr = line.match(/^\\s*/)[0];\n        var tabCount = offsetStr.match(/\\t*/)[0].length;\n\n        if (offsetStr.length === line.length) {\n            return 0;\n        }\n\n        // mixed spaces and tabs in one offset -> don't remove offsets\n        if (tabCount && tabCount !== offsetStr.length) {\n            return 0;\n        }\n\n        if (tabCount) {\n            if (spaceOnlyOffset) {\n                // no spaces, but previous offset has ony spaces -> mixed spaces and tabs\n                return 0;\n            } else {\n                // remember offset contains only tabs\n                tabOnlyOffset = true;\n            }\n        } else {\n            if (tabOnlyOffset) {\n                // no tabs, but previous offset has only tabs -> mixed spaces and tabs\n                return 0;\n            } else {\n                // remember offset contains only spaces\n                spaceOnlyOffset = true;\n            }\n        }\n\n        return offsetStr.length;\n    }));\n\n    // remove common offsets if possible\n    if (offset) {\n        lines = lines.map(function(line) {\n            return line.substr(offset);\n        });\n    }\n\n    return {\n        source: lines.join('\\n'),\n        offset: offset,\n        lineCount: lineCount\n    };\n}\n\n/**\n * Parse HTML and search for <script> sources. Each script source also normalize\n * by line offset. Result contains script sources with information about line\n * offset (that was removed for each line) and lines count before script source.\n * This information helps restore absolute positions in html file for errors.\n *\n * @param {String} filename\n * @param {String} data\n * @returns {Object[]}\n */\nfunction extractJs(filename, data) {\n    var errors = new Errors(new HtmlFile({\n        filename: filename,\n        source: data\n    }));\n    var scripts = getScripts(data);\n    var sources = [];\n    var line = 1;\n    var lastHtmlPos = 0;\n\n    scripts.forEach(function(scriptInfo) {\n        // fetch script source and normalize it\n        var normalized = normalizeSource(scriptInfo.source);\n\n        // add line offset before script\n        line += data.substring(lastHtmlPos, scriptInfo.start).split(rLineSplit).length - 1;\n\n        sources.push({\n            source: normalized.source,\n            offset: normalized.offset,\n            line: line\n        });\n\n        // save offsets for next fragment\n        line += normalized.lineCount - 1;\n        lastHtmlPos = scriptInfo.end;\n    });\n\n    return {\n        sources: sources,\n        errors: errors,\n        addError: function(error) {\n            errors._errorList.push({\n                filename: filename,\n                rule: error.rule,\n                message: error.message,\n                line: error.line,\n                column: error.column\n            });\n        }\n    };\n}\n\nmodule.exports = extractJs;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/config/node-configuration.js":"var path = require('path');\nvar util = require('util');\nvar fs = require('fs');\nvar assert = require('assert');\n\nvar glob = require('glob');\nvar resolve = require('resolve');\n\nvar utils = require('../utils');\nvar Configuration = require('./configuration');\nvar configFinder = require('../cli-config');\n\nvar OVERRIDE_OPTIONS = [\n    'fix',\n    'preset',\n    'maxErrors',\n    'errorFilter',\n    'es3',\n    'extract'\n];\n\nfunction req(entity, dir) {\n    return require(\n        resolve.sync(entity, { basedir: dir })\n    );\n}\n\n/**\n * nodejs-compatible configuration module.\n *\n * @name NodeConfiguration\n * @augments Configuration\n * @constructor\n */\nfunction NodeConfiguration() {\n    Configuration.call(this);\n    this._basePath = process.cwd();\n}\n\nutil.inherits(NodeConfiguration, Configuration);\n\n/**\n * Overrides configuration with options specified by the CLI\n *\n * @param {Object} program\n */\nNodeConfiguration.prototype.overrideFromCLI = function(program) {\n    var overrides = {};\n\n    OVERRIDE_OPTIONS.forEach(function(option) {\n        if (option in program) {\n            overrides[option] = program[option];\n        }\n    });\n\n    this.override(overrides);\n};\n\n/**\n * Load external module.\n *\n * @param {String|null} external - path (relative or absolute) or name to the external module\n * @param {String} type - type of the module\n * @param {String} [config = _basePath] - path to config relative to which external entities will be loaded\n * @returns {Module|null}\n * @protected\n */\nNodeConfiguration.prototype.loadExternal = function(external, type, config) {\n    assert(\n        typeof external === 'string' || external === null,\n        '\"' + type + '\" option requires a string or null value'\n    );\n\n    if (external === null) {\n        return null;\n    }\n\n    var dir = config ? path.dirname(config) : this._basePath;\n    var get = function(prefix, postfix) {\n        prefix = prefix || '';\n        postfix = postfix || '';\n\n        try {\n            return finder(\n                utils.normalizePath(prefix + external + postfix, dir),\n                dir\n            );\n        } catch (e) {}\n\n        return null;\n    }.bind(this);\n\n    var finder;\n    if (type === 'preset') {\n        finder = configFinder.getContent;\n\n    } else {\n        finder = req;\n    }\n\n    var content;\n\n    if (external.indexOf('jscs-') !== 0) {\n        content = get('jscs-');\n\n        if (!content && type === 'preset') {\n            content = get('jscs-preset-') || get('jscs-config-');\n\n            if (!content && external.indexOf('/') !== -1 && !external.split('.')[1]) {\n                content = get('jscs-', '.json') ||\n                    get('jscs-', '.js') ||\n                    get('jscs-preset-', '.json') ||\n                    get('jscs-config-', '.json') ||\n                    get('jscs-preset-', '.js') ||\n                    get('jscs-config-', '.js');\n            }\n        }\n    }\n\n    return content || get();\n};\n\n/**\n * Loads plugin data.\n *\n * @param {String|function(Configuration)} plugin\n * @param {String} [config] - path to config relative to which plugin will be loaded\n * @protected\n */\nNodeConfiguration.prototype._loadPlugin = function(plugin, config) {\n    if (typeof plugin !== 'function') {\n        plugin = this.loadExternal(plugin, 'plugin', config);\n    }\n\n    return Configuration.prototype._loadPlugin.call(this, plugin);\n};\n\n/**\n * Loads preset.\n *\n * @param {String|null} preset\n * @param {String} config - path to config relative to which plugin will be loaded\n * @protected\n */\nNodeConfiguration.prototype._loadPreset = function(preset, config) {\n    var name = path.basename(preset).split('.')[0];\n\n    try {\n        this.registerPreset(name, this.loadExternal(preset, 'preset', config));\n    } catch (e) {\n        var registeredPresets = this.getRegisteredPresets();\n\n        if (preset in registeredPresets) {\n            Configuration.prototype._loadPreset.call(this, preset);\n            return;\n        }\n    }\n\n    // If preset is an external module, error will be thrown by the caller\n    Configuration.prototype._loadPreset.call(this, name);\n};\n\n/**\n * Loads an error filter module.\n *\n * @param {String|null} filter\n * @param {String} config - path to config relative to which plugin will be loaded\n * @protected\n */\nNodeConfiguration.prototype._loadErrorFilter = function(filter, config) {\n    Configuration.prototype._loadErrorFilter.call(\n        this,\n        this.loadExternal(filter, 'errorFilter', config)\n    );\n};\n\n/**\n * Loads additional rule.\n *\n * @param {String|Rule} additionalRule\n * @param {String} config - path to config relative to which plugin will be loaded\n * @private\n */\nNodeConfiguration.prototype._loadAdditionalRule = function(additionalRule, config) {\n    config = config || this._basePath;\n\n    if (typeof additionalRule === 'string') {\n        if (glob.hasMagic(additionalRule)) {\n\n            // In some cases there might not be a config\n            // like if options are defined through direct initialization (grunt plugin case)\n            config = fs.statSync(config).isDirectory() ? config : path.dirname(config);\n\n            glob.sync(path.resolve(config, additionalRule)).forEach(function(p) {\n                var Rule = require(p);\n                Configuration.prototype._loadAdditionalRule.call(this, new Rule());\n            }, this);\n        } else {\n            var Rule = this.loadExternal(additionalRule, 'rule', config);\n            Configuration.prototype._loadAdditionalRule.call(this, new Rule());\n        }\n    } else {\n        Configuration.prototype._loadAdditionalRule.call(this, additionalRule);\n    }\n};\n\nmodule.exports = NodeConfiguration;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/utils.js":"var path = require('path');\nvar Vow = require('vow');\nvar reservedWords = require('reserved-words');\n\nvar IDENTIFIER_NAME_ES5_RE = require('../patterns/identifiers-ES5');\nvar IDENTIFIER_NAME_ES6_RE = require('../patterns/identifiers-ES6');\n\nvar TRAILING_UNDERSCORES_RE = /(^_+|_+$)/g;\n\nvar SNAKE_CASE_RE = /^([a-z$][a-z0-9$]+)(_[a-z0-9$]+)+$/i;\n\n/**\n * All keywords where spaces are a stylistic choice\n * @type {Array}\n */\nexports.spacedKeywords = [\n    'do',\n    'for',\n    'if',\n    'else',\n    'switch',\n    'case',\n    'try',\n    'catch',\n    'finally',\n    'void',\n    'while',\n    'with',\n    'return',\n    'typeof',\n    'function'\n];\n\n/**\n * All keywords where curly braces are a stylistic choice\n * @type {Array}\n */\nexports.curlyBracedKeywords = [\n    'if',\n    'else',\n    'for',\n    'while',\n    'do',\n    'case',\n    'default',\n    'with'\n];\n\n/**\n * Returns true if name is valid identifier name.\n *\n * @param {String} name\n * @param {String} dialect\n * @returns {Boolean}\n */\nexports.isValidIdentifierName = function(name, dialect) {\n    dialect = dialect || 'es5';\n    var identifierRegex = dialect === 'es5' ? IDENTIFIER_NAME_ES5_RE : IDENTIFIER_NAME_ES6_RE;\n    return !reservedWords.check(name, dialect, true) && identifierRegex.test(name);\n};\n\n/**\n * Snake case tester\n *\n * @param {String} name\n * @return {Boolean}\n */\nexports.isSnakeCased = function(name) {\n    return SNAKE_CASE_RE.test(name);\n};\n\n/**\n * Returns the function expression node if the provided node is an IIFE,\n * otherwise returns null.\n *\n * @param  {Object} node\n * @return {?Object}\n */\nexports.getFunctionNodeFromIIFE = function(node) {\n    if (node.type !== 'CallExpression') {\n        return null;\n    }\n\n    var callee = node.callee;\n\n    if (callee.type === 'FunctionExpression') {\n        return callee;\n    }\n\n    if (callee.type === 'MemberExpression' &&\n        callee.object.type === 'FunctionExpression' &&\n        callee.property.type === 'Identifier' &&\n        (callee.property.name === 'call' || callee.property.name === 'apply')\n    ) {\n        return callee.object;\n    }\n\n    return null;\n};\n\n/**\n * Trims leading and trailing underscores\n *\n * @param {String} name\n * @return {String}\n */\nexports.trimUnderscores = function(name) {\n    var res = name.replace(TRAILING_UNDERSCORES_RE, '');\n    return res ? res : name;\n};\n\n/**\n * Whether or not the given path is relative\n *\n * @param  {String}  path\n * @return {Boolean}\n */\nexports.isRelativePath = function(path) {\n    // Logic from: https://github.com/joyent/node/blob/4f1ae11a62b97052bc83756f8cb8700cc1f61661/lib/module.js#L237\n    var start = path.substring(0, 2);\n    return start === './' || start === '..';\n};\n\n/**\n * Resolves a relative filepath against the supplied base path\n * or just returns the filepath if not relative\n *\n * @param  {String} filepath\n * @param  {String} basePath\n * @return {String}\n */\nexports.normalizePath = function(filepath, basePath) {\n    if (this.isRelativePath(filepath)) {\n        return path.resolve(basePath, filepath);\n    }\n\n    return filepath;\n};\n\n/**\n * Wraps a function such that you can interact with a promise and not a\n * node-style callback.\n *\n * @param  {Function} fn - function that expects a node-style callback\n * @return {Function} When invoked with arguments, returns a promise resolved/rejected\n *                    based on the results of the wrapped node-style callback\n */\nexports.promisify = function(fn) {\n    return function() {\n        var deferred = Vow.defer();\n        var args = [].slice.call(arguments);\n\n        args.push(function(err, result) {\n            if (err) {\n                deferred.reject(err);\n            } else {\n                deferred.resolve(result);\n            }\n        });\n\n        fn.apply(null, args);\n\n        return deferred.promise();\n    };\n};\n\n/**\n * All possible binary operators supported by JSCS\n * @type {Array}\n */\nexports.binaryOperators = [\n\n    // assignment operators\n    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n    '&=', '|=', '^=',\n\n    '+', '-', '*', '/', '%', '<<', '>>', '>>>', '&',\n    '|', '^', '&&', '||', '===', '==', '>=',\n    '<=', '<', '>', '!=', '!=='\n];\n\n/**\n * Increment and decrement operators\n * @type {Array}\n */\nexports.incrementAndDecrementOperators = ['++', '--'];\n\n/**\n * All possible unary operators supported by JSCS\n * @type {Array}\n */\nexports.unaryOperators = ['-', '+', '!', '~'].concat(exports.incrementAndDecrementOperators);\n\n/**\n * All possible operators support by JSCS\n * @type {Array}\n */\nexports.operators = exports.binaryOperators.concat(exports.unaryOperators);\n\n/**\n * Returns a function that can check if a comment is a valid pragma.\n *\n * @param {Array} additionalExceptions can optionally be added to the existing pragmaKeywords\n * @returns {Function} that can be used to determine if a comment (supplied as an argument is a valid pragma\n *\n */\nexports.isPragma = function(additionalExceptions) {\n    var pragmaKeywords = [\n        'eslint',\n        'eslint-env',\n        'eslint-enable',\n        'eslint-disable',\n        'eslint-disable-line',\n        'eslint-disable-next-line',\n        'global',\n        'jshint',\n        'jslint',\n        'globals',\n        'falls through',\n        'exported',\n        'jscs:',\n        'jscs:enable',\n        'jscs:disable',\n        'jscs:ignore',\n        'istanbul'\n    ];\n    if (additionalExceptions && Array.isArray(additionalExceptions)) {\n        pragmaKeywords = pragmaKeywords.concat(additionalExceptions);\n    }\n\n    return function(comment) {\n        // pragmaKeywords precede a space or the end of the comment\n        var trimmedComment = comment.trim() + ' ';\n        for (var i = 0; i < pragmaKeywords.length; i++) {\n            if (trimmedComment.indexOf(pragmaKeywords[i] + ' ') === 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/patterns/identifiers-ES5.js":"module.exports = /^(?:[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC])(?:[\\$0-9A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC])*$/;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/patterns/identifiers-ES6.js":"module.exports = /^(?:[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D])(?:[\\$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])*$/;\n","/home/travis/build/npmtest/node-npmtest-jscs/jscs/lib/cli-config.js":"/**\n * Command line config helpers\n */\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar stripJSONComments = require('strip-json-comments');\nvar yaml = require('js-yaml');\nvar parseJson = require('jsonlint').parse;\nvar supportsColor = require('chalk').supportsColor;\nvar glob = require('glob');\nvar resolve = require('resolve');\nvar stripBOM = require('strip-bom');\n\n// Configuration sources in priority order.\nvar configs = ['package.json', '.jscsrc', '.jscs.json', '.jscs.yaml'];\n\n// Before, \"findup-sync\" package was used,\n// but it does not provide filter callback\nfunction findup(patterns, options, fn) {\n    /* jshint -W083 */\n\n    var lastpath;\n    var file;\n\n    options = Object.create(options);\n    options.maxDepth = 1;\n    options.cwd = path.resolve(options.cwd);\n\n    do {\n        file = patterns.filter(function(pattern) {\n            var configPath = glob.sync(pattern, options)[0];\n\n            if (configPath) {\n                return fn(path.join(options.cwd, configPath));\n            }\n        })[0];\n\n        if (file) {\n            return path.join(options.cwd, file);\n        }\n\n        lastpath = options.cwd;\n        options.cwd = path.resolve(options.cwd, '..');\n    } while (options.cwd !== lastpath);\n}\n\n/**\n * Get content of the configuration file.\n *\n * @param {String} config - partial path to configuration file\n * @param {String} directory - directory path which will be joined with config argument\n * @return {Object}\n */\nexports.getContent = function(config, directory) {\n    if (!config) {\n        return;\n    }\n\n    if (!directory) {\n        directory = process.cwd();\n    }\n\n    var configPath = path.resolve(directory, config);\n    var ext;\n    var data;\n    var content;\n    var requireConfigPath;\n\n    if (fs.existsSync(configPath)) {\n        config = path.basename(config);\n        ext = path.extname(configPath);\n\n        if (ext === '.js') {\n            content = require(configPath);\n        } else {\n            data = stripBOM(fs.readFileSync(configPath, 'utf8'));\n\n            if (ext === '.json') {\n                content = parseJson(stripJSONComments(data));\n            } else if (ext === '.yaml') {\n                content = yaml.safeLoad(data);\n            } else {\n                // try both JSON and YAML\n\n                try {\n                    content = parseJson(stripJSONComments(data));\n                } catch (jsonError) {\n                    try {\n                        content = yaml.safeLoad(data);\n                    } catch (yamlError) {\n                        if (stripJSONComments(data).trim()[0] === '{') {\n                            // the intention was probably JSON\n                            throw jsonError;\n                        } else {\n                            // assume the intention was YAML\n                            throw yamlError;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // Try to load it as a node module\n        try {\n            requireConfigPath = resolve.sync(config, { basedir: directory });\n            content = require(requireConfigPath);\n        } catch (e) {}\n    }\n\n    if (content) {\n        // Adding property via Object.defineProperty makes it\n        // non-enumerable and avoids warning for unsupported rules\n        Object.defineProperty(content, 'configPath', {\n            value: requireConfigPath || configPath\n        });\n    }\n\n    return content && config === 'package.json' ? content.jscsConfig : content;\n};\n\n/**\n * Get content of the configuration file.\n *\n * @param {String} config - partial path to configuration file\n * @param {String} [cwd = process.cwd()] - directory path which will be joined with config argument\n * @return {Object|undefined}\n */\nexports.load = function(config, cwd) {\n    var content;\n    var directory = cwd || process.cwd();\n\n    // If config option is given, attempt to load it\n    if (config) {\n        return this.getContent(config, directory);\n    }\n\n    content = this.getContent(\n        findup(configs, { nocase: true, cwd: directory }, function(configPath) {\n            if (path.basename(configPath) === 'package.json') {\n                return !!this.getContent(configPath);\n            }\n\n            return true;\n        }.bind(this))\n    );\n\n    if (content) {\n        return content;\n    }\n\n    // Try to load standard configs from home dir\n    var directoryArr = [process.env.USERPROFILE, process.env.HOMEPATH, process.env.HOME];\n    for (var i = 0, dirLen = directoryArr.length; i < dirLen; i++) {\n        if (!directoryArr[i]) {\n            continue;\n        }\n\n        for (var j = 0, len = configs.length; j < len; j++) {\n            content = this.getContent(configs[j], directoryArr[i]);\n\n            if (content) {\n                return content;\n            }\n        }\n    }\n};\n\n/**\n * Get reporter function and path to it.\n *\n * @param {String} reporter - path or the name of one of the pre-defined reporters\n * @param {Boolean} [colors = true] - should it be a colorful output?\n * @return {{writer: Function, path: String}}\n */\nexports.getReporter = function(reporter, colors) {\n    var writerPath;\n    var writer;\n\n    if (colors !== false) {\n        colors = true;\n    }\n\n    if (reporter) {\n        // ensure reporter is a string (and allow non-string types to be coerced)\n        reporter = reporter.toString();\n        writerPath = path.resolve(process.cwd(), reporter);\n\n        if (!fs.existsSync(writerPath)) {\n            writerPath = path.resolve(__dirname, './reporters/' + reporter);\n        }\n    } else {\n        writerPath = path.resolve(\n            __dirname, './reporters/', (colors && supportsColor ? 'console' : 'text')\n        );\n    }\n\n    try {\n        writer = require(writerPath);\n    } catch (e) {\n        writer = null;\n    }\n\n    if (!writer) {\n        try {\n            writer = require(reporter);\n            writerPath = reporter;\n        } catch (e) {}\n    }\n\n    return {\n        path: writerPath,\n        writer: writer\n    };\n};\n"}